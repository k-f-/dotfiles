#!/usr/bin/env bash
#
# Dotfiles Uninstallation Script
# Removes symlinks created by GNU Stow
#
# Usage: ./uninstall [OPTIONS]
#   --help      Show this help message
#   --dry-run   Show what would be done without making changes
#   --force     Don't ask for confirmation
#   --list      List all dotfiles symlinks without removing
#   --verbose   Show detailed output

set -euo pipefail

# -----------------------------------------------------------------------------
# Configuration
# -----------------------------------------------------------------------------

DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
STOW_TARGET="${HOME}"

# All packages that might be installed (alphabetically sorted)
ALL_PACKAGES=(
    aerospace
    bash
    doom
    emacs
    git
    gnupg
    kitty
    mail
    secrets
    sketchybar
    skhd
    ssh
    vim
    x-windows
    yabai
    youtube-dl
    zsh
)

DRY_RUN=false
FORCE=false
LIST_ONLY=false
VERBOSE=false

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# -----------------------------------------------------------------------------
# Helper Functions
# -----------------------------------------------------------------------------

print_header() {
    echo -e "\n${BLUE}==>${NC} ${1}"
}

print_success() {
    echo -e "${GREEN}✓${NC} ${1}"
}

print_warning() {
    echo -e "${YELLOW}!${NC} ${1}"
}

print_error() {
    echo -e "${RED}✗${NC} ${1}" >&2
}

print_verbose() {
    if [[ "${VERBOSE}" == "true" ]] || [[ "${LIST_ONLY}" == "true" ]]; then
        echo -e "  ${1}"
    fi
}

# Find all symlinks in HOME that point to our dotfiles
find_dotfiles_symlinks() {
    local symlinks=()

    # Search common locations where stow creates symlinks
    local search_paths=(
        "${HOME}/."*
        "${HOME}/.config"/*
        "${HOME}/.local"/*
        "${HOME}/bin"/*
    )

    for path in "${search_paths[@]}"; do
        # Skip if path doesn't exist or is not a symlink
        [[ ! -L "$path" ]] && continue

        local target
        target=$(readlink "$path" 2>/dev/null || true)

        # Check if it points to our dotfiles directory
        if [[ "$target" == *"${DOTFILES_DIR}"* ]]; then
            symlinks+=("$path")
        fi
    done

    printf '%s\n' "${symlinks[@]}"
}

# List all dotfiles symlinks
list_symlinks() {
    print_header "Dotfiles Symlinks"

    local count=0
    while IFS= read -r symlink; do
        if [[ -n "$symlink" ]]; then
            local target
            target=$(readlink "$symlink")
            echo "  ${symlink} -> ${target}"
            ((count++))
        fi
    done < <(find_dotfiles_symlinks)

    echo ""
    if [[ $count -eq 0 ]]; then
        print_warning "No dotfiles symlinks found"
    else
        echo "Total: ${count} symlink(s)"
    fi
}

show_help() {
    cat << EOF
Dotfiles Uninstallation Script

Usage: ./uninstall [OPTIONS]

OPTIONS:
    --help      Show this help message
    --dry-run   Show what would be done without making changes
    --force     Don't ask for confirmation
    --list      List all dotfiles symlinks without removing anything
    --verbose   Show detailed output during uninstall

EXAMPLES:
    ./uninstall --list       # See what symlinks exist
    ./uninstall --dry-run    # Preview what would be removed
    ./uninstall              # Remove all dotfile symlinks (with confirmation)
    ./uninstall --force      # Remove without confirmation

SAFETY:
    - By default, asks for confirmation before removing
    - Use --list to see what will be affected
    - Use --dry-run to preview changes safely
    - Your files in ${DOTFILES_DIR} are never deleted

WARNING:
    This will remove all symlinks created by stow. Your configurations
    will no longer be active, but the files in this repository will
    remain intact.

EOF
    exit 0
}

unstow_package() {
    local package="$1"
    local package_dir="${DOTFILES_DIR}/${package}"

    if [[ ! -d "${package_dir}" ]]; then
        return 0
    fi

    print_verbose "Unstowing ${package}..."

    local stow_cmd="stow --delete --target=\"${STOW_TARGET}\" --ignore='^README.*' --dotfiles \"${package}\""

    if [[ "${VERBOSE}" == "true" ]]; then
        stow_cmd="${stow_cmd} --verbose=4"
    fi

    if [[ "${DRY_RUN}" == "true" ]]; then
        stow_cmd="stow --no --delete --target=\"${STOW_TARGET}\" --ignore='^README.*' --dotfiles \"${package}\""
    fi

    if eval "cd '${DOTFILES_DIR}' && ${stow_cmd} 2>&1"; then
        print_success "Removed ${package}"
        return 0
    else
        print_warning "Could not remove ${package} (may not be installed)"
        return 1
    fi
}

remove_additional_symlinks() {
    print_header "Removing additional symlinks..."

    # Remove .bash_profile if it links to .bashrc
    if [[ -L "${HOME}/.bash_profile" ]]; then
        local link_target
        link_target=$(readlink "${HOME}/.bash_profile")
        if [[ "${link_target}" == *".bashrc"* ]]; then
            echo "  Removing .bash_profile -> .bashrc link"
            if [[ "${DRY_RUN}" == "false" ]]; then
                rm -f "${HOME}/.bash_profile"
            fi
            print_success "Removed .bash_profile link"
        fi
    fi
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------

main() {
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                show_help
                ;;
            --dry-run)
                DRY_RUN=true
                print_warning "DRY RUN MODE - No changes will be made"
                shift
                ;;
            --force|-f)
                FORCE=true
                shift
                ;;
            --list|-l)
                LIST_ONLY=true
                shift
                ;;
            --verbose|-v)
                VERBOSE=true
                shift
                ;;
            *)
                print_error "Unknown option: $1"
                show_help
                ;;
        esac
    done

    # Banner
    cat << "EOF"
╔═══════════════════════════════════════╗
║   Dotfiles Uninstallation Script     ║
╚═══════════════════════════════════════╝
EOF

    # If list-only mode, just show symlinks and exit
    if [[ "${LIST_ONLY}" == "true" ]]; then
        list_symlinks
        exit 0
    fi

    # Show what will be removed
    echo ""
    print_header "Preview of changes"
    list_symlinks

    # Confirmation
    if [[ "${FORCE}" != "true" ]] && [[ "${DRY_RUN}" != "true" ]]; then
        echo ""
        print_warning "This will remove all dotfile symlinks from your home directory."
        echo "Your configuration files in ${DOTFILES_DIR} will remain intact."
        echo ""
        read -p "Are you sure you want to continue? [y/N] " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Uninstallation cancelled."
            exit 0
        fi
    fi

    # Check for stow
    if ! command -v stow &> /dev/null; then
        print_error "GNU Stow is not installed!"
        exit 1
    fi

    # Unstow all packages
    print_header "Removing dotfiles..."
    local success_count=0
    local fail_count=0

    for package in "${ALL_PACKAGES[@]}"; do
        if unstow_package "${package}"; then
            ((success_count++))
        else
            ((fail_count++))
        fi
    done

    # Remove additional symlinks
    remove_additional_symlinks

    # Summary
    echo ""
    print_header "Uninstallation Summary"
    echo "  Successfully removed: ${success_count} packages"
    if [[ ${fail_count} -gt 0 ]]; then
        echo "  Skipped: ${fail_count} packages (not installed)"
    fi

    if [[ "${DRY_RUN}" == "true" ]]; then
        print_warning "This was a dry run - no changes were made"
    else
        print_success "Uninstallation complete!"
        echo ""
        echo "Your dotfiles repository is still at: ${DOTFILES_DIR}"
        echo "To reinstall, run: ${DOTFILES_DIR}/install"
    fi
}

main "$@"
