#+TITLE: Emacs Configuration
#+AUTHOR: Kyle Fring
#+EMAIL: me@kfring.com
#+OPTIONS: toc:nil num:nil

* A quote from Hunter S. Thompson
'but once you get locked into a serious drug collection,
the tendency is to push it as far as you can.'

       --- Hunter S. Thompson, Fear and Loathing in Las Vegas
* Set global user

#+BEGIN_SRC emacs-lisp
;; --------------------------------------------------
;; Set global user
(setq user-full-name "Kyle Fring"
	  user-mail-address "me@kfring.com")
(setq calendar-location-name "Philadelphia, PA")
(setq calendar-latitude 39.95)
(setq calendar-longitude -75.16)
#+END_SRC

* Customize File Location

#+BEGIN_SRC emacs-lisp
;; Create custom file elsewhere.
;; keep customize settings in their own file 
(setq custom-file "~/.emacs.d/custom.el")
(when (file-exists-p custom-file) (load custom-file))
#+END_SRC

* User Interface
** Minimal UI
Drop scroll bar, Toolbar, Tooltips and Menu-Bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)
(menu-bar-mode   -1)
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC

** Startup screen
Don't display the help screen at start-up
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
(setq inhibit-startup-screen t)
#+END_SRC

** No Bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** y-n not Yes-No
From http://pages.sachachua.com/.emacs.d/Sacha.html#sec-1-4-8

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Avoid native dialogues
#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
#+END_SRC

** Col-wrap

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook
    '(lambda() (set-fill-column 80)))
#+END_SRC

* Fonts

#+BEGIN_SRC emacs-lisp
;; Test char and monospace:
;; 0123456789abcdefghijklmnopqrstuvwxyz [] () :;,. !@#$^&*
;; 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ {} <> "'`  ~-_/|\?
(add-to-list 'default-frame-alist
             '(font . "InputMono-12"))
#+END_SRC

* Backups
** Config Backups
Let us centralize where emac's keeps backups

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
	backup-by-copying t    ; Don't delink hardlinks
	version-control t      ; Use version numbers on backups
	delete-old-versions t  ; Automatically delete excess backups
	kept-new-versions 20   ; how many of the newest versions to keep
	kept-old-versions 5    ; and how many of the old
	)
#+END_SRC

** Backup Function
   Create a backup to a designated dir, mirroring the full path ala ergomacs

#+BEGIN_SRC emacs-lisp
(defun kef-backup-file-name (fpath)
  "Return a new file path of a given file path.
If the new path's directories does not exist, create them."
  (let* (
		(backupRootDir "~/.emacs.d/backup/")
		(filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
		(backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
		)
	(make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
	backupFilePath
  )
)

(setq make-backup-file-name-function 'kef-backup-file-name)
#+END_SRC

* Functions
** Kill current buffer.

#+BEGIN_SRC emacs-lisp
(defun kef-kill-current-buffer ()
  "Kill the current buffer without prompting."
  (interactive)
  (kill-buffer (current-buffer)))

;; Don't comfirm on kill buffer, just close it.
(global-set-key (kbd "C-x k") 'kef-kill-current-buffer)
#+END_SRC

** Visit emacs config
#+BEGIN_SRC emacs-lisp
(defun kef-visit-emacs-config ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))

;; Jump to emacs config file.
(global-set-key (kbd "C-c e") 'kef-visit-emacs-config)
#+END_SRC

** TODO Cycle Properties drawer in org-mode
So this is very cool, but not exactly what we want.

;;#+BEGIN_SRC emacs-lisp
(defun org-cycle-hide-drawers (state)
  "Re-hide all drawers after a visibility state change."
  (when (and (derived-mode-p 'org-mode)
             (not (memq state '(overview folded contents))))
    (save-excursion
      (let* ((globalp (memq state '(contents all)))
             (beg (if globalp
                    (point-min)
                    (point)))
             (end (if globalp
                    (point-max)
                    (if (eq state 'children)
                      (save-excursion
                        (outline-next-heading)
                        (point))
                      (org-end-of-subtree t)))))
        (goto-char beg)
        (while (re-search-forward org-drawer-regexp end t)
          (save-excursion
            (beginning-of-line 1)
            (when (looking-at org-drawer-regexp)
              (let* ((start (1- (match-beginning 0)))
                     (limit
                       (save-excursion
                         (outline-next-heading)
                           (point)))
                     (msg (format
                            (concat
                              "org-cycle-hide-drawers:  "
                              "`:END:`"
                              " line missing at position %s")
                            (1+ start))))
                (if (re-search-forward "^[ \t]*:END:" limit t)
                  (outline-flag-region start (point-at-eol) t)
                  (user-error msg))))))))))
;;#+END_SRC

* Keybinding
Set some keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

* Movement & Formatting
** Smooth Scrolling
Smooth scrolling means when you hit C-n to go to the next line
at the bottom of the page, instead of doing a page-down,
it shifts down by a single line. The margin means that
much space is kept between the cursor and the bottom of the buffer.
#+BEGIN_SRC emacs-lisp
(setq scroll-margin 3
	  scroll-conservatively 101
	  scroll-up-aggressively 0.01
	  scroll-down-aggressively 0.01
	  scroll-preserve-screen-position t
	  auto-window-vscroll nil
	  hscroll-margin 5
	  hscroll-step 5)
#+END_SRC

** Tabs
Tabs should be four spaces.
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 8)
(setq-default tab-stop-list (list 8 16 24 32 40 48 56 64 72 80 88 96 104 112 120)
#+END_SRC

** Always indent with spaces
Never use tabs. Tabs are the devil’s whitespace.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Save my location within a file

Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.

#+BEGIN_SRC emacs-lisp
  (save-place-mode t)
#+END_SRC

* Package repos

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("org" . "http://orgmode.org/elpa/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("gnu"   . "http://elpa.gnu.org/packages/"))) 
  (setq package-archive-priorities
      '(("melpa" .  4)
        ("melpa-stable" . 3)
        ("org" . 2)
        ("gnu" . 1)))
  (package-initialize)
#+END_SRC

* Bootstrap =use-package=
Install and load =use-package=
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-verbose t)
(setq use-package-always-ensure t)
;; (setq use-package-always-defer t)
(require 'use-package)
#+END_SRC

* Themes and Display
** Themes

#+BEGIN_SRC emacs-lisp
;;(use-package apropospriate-theme :ensure)
;;(use-package dracula-theme :ensure)
;;(use-package poet-theme :ensure)
(use-package spacemacs-theme :ensure)
(load-theme 'spacemacs-dark t)

(let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line          nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :underline  line)
    (set-face-attribute 'mode-line          nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :background "#b2b2b2"))
#+END_SRC

* Packages
** Projectile
Install and configure projectile.
Super+P pulls up projectiles command map.
search in $HOME/code for projects.

#+BEGIN_SRC emacs-lisp
  (use-package projectile :ensure
  :config
  (define-key projectile-mode-map (kbd "s-P") 'projectile-command-map)
  (projectile-mode +1)
  (setq projectile-project-search-path '("~/code/")))
#+END_SRC

** Ivy, Swiper and Counsel

#+BEGIN_SRC emacs-lisp
(use-package ivy :ensure
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
      '((swiper . ivy--regex-plus)
        (t      . ivy--regex-fuzzy)))   ;; enable fuzzy searching everywhere except for Swiper

  (global-set-key (kbd "s-b") 'ivy-switch-buffer)
  ;; (global-set-key (kbd "M-s-b") 'ivy-resume)
  )

(use-package swiper :ensure
  :config
  ;; (global-set-key "\C-r" 'swiper)
  (global-set-key (kbd "C-s") 'swiper))

(use-package counsel :ensure
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "s-y") 'counsel-yank-pop)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file))

(use-package smex :ensure)
(use-package flx :ensure)
(use-package avy :ensure)
#+END_SRC

Ivy-rich make Ivy a bit more friendly by adding information to ivy buffers, e.g. description of commands in =M-x=, meta info about buffers in =ivy-switch-buffer=, etc.

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich :ensure
  :config
  (ivy-rich-mode 1)
  (setq ivy-rich-path-style 'abbrev)) ;; To abbreviate paths using abbreviate-file-name (e.g. replace “/home/username” with “~”
#+END_SRC

** Counsel integration for Projectile

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile :ensure
  :config
  (counsel-projectile-mode 1)
  (global-set-key (kbd "s-F") 'counsel-projectile-ag)
  (global-set-key (kbd "s-p") 'counsel-projectile))

(setq projectile-completion-system 'ivy)
#+END_SRC  

** org-mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-startup-indented t) ;; Indent org-file display
;;(setq org-hide-leading-stars t)
  (setq org-src-tab-acts-natively t)
)
#+END_SRC

*** Org file locations
Store all my org files in =~/Dropbox/org=.

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org")
#+END_SRC

*** Org agenda 
And all of those files should be in included agenda.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Dropbox/org/life.org"
                         "~/Dropbox/org/work.org"
                         "~/Dropbox/org/edu.org"))
#+END_SRC

*** Refile Targets
Refile targets should include all files? and down to 9 levels into them.

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote (("notes.org" :maxlevel . 2) ;; Top level headings in notes
                                 (org-agenda-files :maxlevel . 9))))

(setq org-outline-path-complete-in-steps nil)         ;; Refile in a single go
(setq org-refile-use-outline-path t)                  ;; Show full paths for refiling

(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
#+END_SRC

*** Colorize src blocks in org-mode

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

*** org-todo-keywords

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC

*** org-capture-templates

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates '(("t" "Todo [life]" entry
;; A list of things to do that I do NOT get direct compensation for.
                              (file+headline "~/Dropbox/org/life.org" "Personal")
                               "* TODO %i%? \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")

;; A todo list for work related items, things I get paid money for.
                              ("w" "Todo [work]" entry (file+headline "~/Dropbox/org/work.org" "Tasks")
                               "* TODO %i%? \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")

;; A place to keep ideas for some other time.
                              ("m" "Moonshots" entry (file+headline "~/Dropbox/org/notes.org" "Someday")
                               "* WAITING %i%? \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")
;; Hyperlink Capture
                              ("l" "Hyperlink" entry (file+headline "~/Dropbox/org/notes.org" "Notes")
	                            "* [[%?%^{url}][%^{Description?}]]")

;; general Note Capture
                              ("n" "Note" entry (file+headline "~/Dropbox/org/notes.org" "Notes")
	                            "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)


;; Climbing capture templates
;; use %u for non-interactive time-stamps
;; climb.org capture templates for routes/boulder problems
                               ("r" "Route" table-line
                               (file+headline "~/Dropbox/org/climb.org" "Routes")
                               "|%u|%?%^{Route Name?|NA}|%^{Yosemite Grade?|5.}|%^{Attempts?|0}|%^{Style?|Sport|Trad}|%^{Notes?}|")
 
                               ("b" "Boulder Problem" table-line
                               (file+headline "~/Dropbox/org/climb.org" "Boulder Problems")
                                "|%u|%?%^{Problem Name?|NA}|%^{V-Grade?|NA}|%^{Attempts?|0}|%^{Notes?}|")
))
#+END_SRC

** org-bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets)
(setq org-bullets-bullet-list '("◉" "◎" "⚫" "○" "►" "◇"))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Flyspell

flyspell - in all text modes

#+BEGIN_SRC emacs-lisp
(use-package flyspell :ensure)
(add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC 

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit :ensure
  :config
  (global-set-key (kbd "s-g") 'magit-status))
#+END_SRC

And show changes in the gutter (fringe).

#+BEGIN_SRC emacs-lisp :tangle no
(use-package git-gutter
  :config
  (global-git-gutter-mode 't)
  (set-face-background 'git-gutter:modified 'nil) ;; background color
  (set-face-foreground 'git-gutter:added "green4")
  (set-face-foreground 'git-gutter:deleted "red"))
#+END_SRC

** Company Mode

Use =company-mode= everywhere
#+BEGIN_SRC emacs-lisp
(use-package company :ensure)
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** Use =M-/= for completion.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'company-complete-common)
#+END_SRC

** Install and configure =which-key=

=which-key= displays the possible completions for a long keybinding. That's
really helpful for some modes (like =projectile=, for example).

#+BEGIN_SRC emacs-lisp
(use-package which-key :ensure
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1.0))
#+END_SRC

** org-pomodoro

#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro :ensure)
#+END_SRC

** Deft

Deft-Mode custom functions via: http://pragmaticemacs.com/emacs/tweaking-deft-quicker-notes/
Custom function to save window-layout when launching deft-mode
advise deft to save window config

#+BEGIN_SRC emacs-lisp
(use-package deft :ensure
  :bind ("<f8>" . deft)
  :commands (deft)
  :config (setq deft-directory "~/Dropbox/org/" deft-extensions
                '("md" "org" "txt")))
(setq deft-default-extension "org")
(setq deft-use-filename-as-title nil)
(setq deft-use-filter-string-for-filename t)
(setq deft-file-naming-rules '((noslash . "-")
                               (nospace . "-")
                               (case-fn . downcase)))
(setq deft-text-mode 'org-mode)

;; filenames - replace space and slash with - lcase
(setq deft-file-naming-rules
      '((noslash . "-")
        (nospace . "-")
        (case-fn . downcase)))

(defun kef-deft-save-windows (orig-fun &rest args)
  (setq kef-pre-deft-window-config (current-window-configuration))
  (apply orig-fun args)
  )

(advice-add 'deft :around #'kef-deft-save-windows)

;;function to quit a deft edit cleanly back to pre deft window
(defun kef-quit-deft ()
;;  "Save buffer, kill buffer, kill deft buffer, and restore window config to the way it was before deft was invoked"
  (interactive)
  (save-buffer)
  (kill-this-buffer)
  (switch-to-buffer "*Deft*")
  (kill-this-buffer)
  (when (window-configuration-p kef-pre-deft-window-config)
    (set-window-configuration kef-pre-deft-window-config)
    )
  )

(global-set-key (kbd "C-c q") 'kef-quit-deft)
#+END_SRC

** ox-hugo

Auto-install the package from Melpa.

#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :ensure t 
  :after ox)
#+END_SRC

** yasnippet

I keep my snippets in =~/.emacs/yasnippets/personal=, and I always want =yasnippet=
enabled.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet)  
(setq yas-snippet-dirs '("~/.emacs.d/yasnippets/personal"))
(yas-global-mode 1)
#+END_SRC

** zone-nyan

#+BEGIN_SRC emacs-lisp
;(use-package zone-nyan :ensure)
;(setq zone-programs [zone-nyan])
;(setq zone-when-idle 120) 
#+END_SRC

** theme-changer

We where changing theme based on time, but let us stick with Dracula for now.

#+BEGIN_SRC emacs-lisp
;; (use-package theme-changer :ensure)
;; (require 'theme-changer)
;; (change-theme 'apropospriate-light 'dracula)
#+END_SRC

** mode-line
*** minions
#+BEGIN_SRC emacs-lisp
(use-package minions :ensure t)
(minions-mode +1)
#+END_SRC

*** moody
#+BEGIN_SRC emacs-lisp
(use-package moody :ensure
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))
#+END_SRC

** emacs-speaks-statistics
Let's get emacs talking with R.

#+BEGIN_SRC emacs-lisp
(use-package ess :ensure)
#+END_SRC

** Alert
Alerts for emacs
#+BEGIN_SRC emacs-lisp
  (use-package alert
    :commands (alert)
    :init
    (setq alert-default-style 'notifier))
#+END_SRC

** htmlize

#+BEGIN_SRC emacs-lisp
(use-package htmlize :ensure)
#+END_SRC

