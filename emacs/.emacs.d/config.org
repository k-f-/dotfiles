#+TITLE:GNU Emacs Configuration
#+AUTHOR: Kyle Fring
#+EMAIL: me@kfring.com
#+OPTIONS: toc:t num:nil
* Table of Contents                                               :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#about][About]]
- [[#emacs-initialization][Emacs Initialization]]
  - [[#emacs-server][emacs-server]]
  - [[#set-global-user][Set global user]]
  - [[#package-sources][Package Sources]]
  - [[#bootstrap-use-package][Bootstrap =use-package=]]
- [[#start-up][Start Up]]
  - [[#gpg2][GPG2]]
  - [[#authentication][Authentication]]
  - [[#file-handling-locations-and-loading][File Handling, Locations and Loading]]
  - [[#character-encoding-and-indentation][Character Encoding and Indentation]]
  - [[#user-interface][User Interface]]
  - [[#functions][Functions]]
  - [[#buffer-movement-and-splits][Buffer movement and Splits]]
  - [[#ivy-swiper-and-counsel][Ivy, Swiper and Counsel.]]
  - [[#text-formatting-selection-and-editing][Text Formatting, Selection and Editing]]
  - [[#file-browsing][File Browsing]]
- [[#languages][Languages]]
  - [[#linting][Linting]]
  - [[#commenting-code][Commenting Code]]
  - [[#html--css][HTML & CSS]]
  - [[#javascript][JavaScript]]
  - [[#r][R]]
  - [[#emacs-lsp][emacs-lsp]]
- [[#extended-configuration][Extended Configuration]]
  - [[#abbrevs-auto-completion--snippets][Abbrevs, Auto-completion & Snippets]]
  - [[#dictionary][Dictionary]]
  - [[#thesaurus][Thesaurus]]
  - [[#spellchecking][Spellchecking]]
  - [[#weasel-words][Weasel Words]]
  - [[#version-control][Version Control]]
  - [[#email][Email]]
  - [[#news-reader][News Reader]]
  - [[#terminals][Terminals]]
  - [[#packages][Packages]]
  - [[#org-mode][Org-Mode]]
  - [[#latex][LaTeX]]
  - [[#pandoc][Pandoc]]
  - [[#blog-with-hugo][Blog with Hugo]]
  - [[#hydras][Hydras]]
#+END_QUOTE

* About
#+BEGIN_QUOTE
'but once you get locked into a serious drug collection,
the tendency is to push it as far as you can.'

--- Hunter S. Thompson, Fear and Loathing in Las Vegas
#+END_QUOTE

A massive thanks to folks whom solved their own problems in their own way and
are kind enough to make their solutions available to the world.
- https://caolan.org/dotfiles/emacs.html
- https://github.com/freetonik/emacs-dotfiles
- https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org
- https://github.com/rememberYou/.emacs.d/blob/master/config.org
- https://github.com/zzamboni/dot-emacs/blob/master/init.org#literate-programming-using-org-babel
* Emacs Initialization
** emacs-server
Start the server unless it is already running.
#+BEGIN_SRC emacs-lisp
  (load "server")
  (unless (server-running-p) (server-start))
#+END_SRC

** Set global user
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Kyle Fring"
        user-mail-address "me@kfring.com")
  (setq calendar-location-name "Chattanooga, TN")
  (setq calendar-latitude 39.95)
  (setq calendar-longitude -75.16)
#+END_SRC

** Package Sources
- https://stackoverflow.com/questions/14836958/updating-packages-in-emacs
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(
                           ("melpa" . "http://melpa.org/packages/")
                           ("gnu"   . "http://elpa.gnu.org/packages/")))
  (package-refresh-contents)
  (package-initialize)
#+END_SRC

** Bootstrap =use-package=
Install and load =use-package=
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
#+END_SRC

* Start Up
** GPG2
#+BEGIN_SRC emacs-lisp
(setq epg-gpg-program "/usr/bin/gpg2")
#+END_SRC

Both Company and Abbrev will auto-complete encrypted contents if you let them.
Lets not.
#+BEGIN_SRC emacs-lisp
  (setq dabbrev-ignored-buffer-regexps '(".*\.org$" ".*\.gpg$" "^ [*].*"))

  (defun kef/company-dabbrev-ignore (buffer)
    (let (res)
      ;; don't search in org files, encrypted files, or hidden buffers
      (dolist (re '("\.org$" "\.gpg$" "^ [*]") res)
        (if (string-match-p re (buffer-name buffer))
            (setq res t)))))
  (setq company-dabbrev-ignore-buffers 'kef/company-dabbrev-ignore)
#+END_SRC
** Authentication
#+BEGIN_SRC emacs-lisp
  (setq auth-sources '("~/.gnupg/shared/authinfo.gpg"
                       "~/.authinfo.gpg"
                       "~/.authinfo"
                       "~/.netrc"))
#+END_SRC

** File Handling, Locations and Loading
*** Move custom.el file
Create custom file elsewhere.
Keep customize settings in their own file
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file) (load custom-file))
#+END_SRC

Please stop tracking my packages, I already have =use-package=
#+BEGIN_SRC emacs-lisp
  (defun package--save-selected-packages (&optional VALUE opt)
    nil)
#+END_SRC

*** set a default location for exports.
I'd like to see things kept a bit more tidy littering exported files all over my
org directory.  It's already messy enough.  =~/org/out/export_*= seems
reasonable.
ref: http://rwx.io/posts/org-export-configurations/
ref: https://stackoverflow.com/questions/9559753/emacs-org-mode-export-to-another-directory
#+BEGIN_SRC emacs-lisp
  ;; (defvar org-export-output-directory-prefix "~/out/export_" "prefix of directory used for org-mode export")

  ;; (defadvice org-export-output-file-name (before org-add-export-dir activate)
  ;;   "Modifies org-export to place exported files in a different directory"
  ;;   (when (not pub-dir)
  ;;     (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
  ;;     (when (not (file-directory-p pub-dir))
  ;;       (make-directory pub-dir))))
#+END_SRC

*** Backups
**** Configure Backups
Let us centralize where emac's keeps backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )
#+END_SRC

**** Backup Function
Create a backup to a designated dir, mirroring the full path ala ergomacs
#+BEGIN_SRC emacs-lisp
  (defun kef/backup-file-name (fpath)
    "Return a new file path of a given file path.
  If the new path's directories does not exist, create them."
    (let* (
           (backupRootDir "~/.emacs.d/backup/")
           (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
           (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
           )
      (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
      backupFilePath
      )
    )

  (setq make-backup-file-name-function 'kef/backup-file-name)
#+END_SRC

*** Automatically change or reload the buffer when the file is modified externally
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** Character Encoding and Indentation
*** UTF-8
#+BEGIN_SRC emacs-lisp
  ;; Core settings
  ;; UTF-8 please
  (set-charset-priority 'unicode)
  (setq locale-coding-system   'utf-8)   ; pretty
  (set-terminal-coding-system  'utf-8)   ; pretty
  (set-keyboard-coding-system  'utf-8)   ; pretty
  (set-selection-coding-system 'utf-8)   ; please
  (prefer-coding-system        'utf-8)   ; with sugar on top
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

#+END_SRC

*** Spaces or Tabs
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-07-04 Thu 19:00]
:END:
1. USE tabs when we can. From an inclusive usability standpoint you're being a dick
by expecting those with visual impairments to bend to your will.
2. When we can't, or chose not to we should have an easy way to let emacs handle
   this for us. [[http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html][SRC]]
3. setq-local in the opening of =kef/setup-indent= is causing this error while
   opening a js-mode file
#+BEGIN_QUOTE
Debugger entered--Lisp error: (error "Don’t know how to make a localized variable an alias")
  defvaralias(js2-basic-offset js-indent-level nil)
  byte-code("\301\302!\210\301\303!\210\301\304!\210\301\305!\210\306\010\307\"\203\036\0\301\310!\210\2028\0\311\312\313\314#\210\315\316\317\"\210\315\320\321\"\210\315\322\323\"\210\315\324\325\"\210\314\207" [emacs-version require cl-lib imenu js etags version< "25.0" js2-old-indent defvaralias js2-basic-offset js-indent-level nil defalias js2-proper-indentation js--proper-indentation js2-jsx-indent-line js-jsx-indent-line js2-indent-line js-indent-line js2-re-search-forward js--re-search-forward] 4)
  js2-mode()
  set-auto-mode-0(js2-mode nil)
  set-auto-mode()
  normal-mode(t)
  after-find-file(nil t)
  find-file-noselect-1(#<buffer sketch.js> "~/Dropbox/edu/cm1005-Intro-to-Programming01/gp4-starter/sketch.js" nil nil "~/Dropbox/edu/cm1005-Intro-to-Programming01/gp4-starter/sketch.js" (1444777 66309))
  find-file-noselect("/home/kef/Dropbox/edu/cm1005-Intro-to-Programming01/gp4-starter/sketch.js" nil nil nil)
  find-file("/home/kef/Dropbox/edu/cm1005-Intro-to-Programming01/gp4-starter/sketch.js")
  counsel-find-file-action("/home/kef/Dropbox/edu/cm1005-Intro-to-Programming01/gp4-starter/sketch.js")
  ivy-call()
  ivy-read("Find file: " read-file-name-internal :matcher counsel--find-file-matcher :initial-input nil :action counsel-find-file-action :preselect nil :require-match confirm-after-completion :history file-name-history :keymap (keymap (96 lambda (&optional arg) "nil (`nil')" (interactive "p") (if (string= "" ivy-text) (execute-kbd-macro (kbd "M-o b")) (self-insert-command arg))) (C-backspace . counsel-up-directory) (67108991 . counsel-up-directory)) :caller counsel-find-file)
  counsel--find-file-1("Find file: " nil counsel-find-file-action counsel-find-file)
  counsel-find-file()
  funcall-interactively(counsel-find-file)
  call-interactively(counsel-find-file nil nil)
  command-execute(counsel-find-file)
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  ;; (defun kef/setup-indent (n)
  ;;   ;; java/c/c++
  ;;   (setq c-basic-offset n)
  ;;   ;; web development
  ;;   (setq coffee-tab-width n) ; coffeescript
  ;;   (setq javascript-indent-level n) ; javascript-mode
  ;;   (setq js-indent-level n) ; js-mode
  ;;   (setq js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
  ;;   (setq web-mode-markup-indent-offset n) ; web-mode, html tag in html file
  ;;   (setq web-mode-css-indent-offset n) ; web-mode, css in html file
  ;;   (setq web-mode-code-indent-offset n) ; web-mode, js code in html file
  ;;   (setq css-indent-offset n) ; css-mode
  ;;   )

  ;; (defun kef/tabs-code-style ()
  ;;   (interactive)
  ;;   (message "tab code style!")
  ;;   ;; use tab instead of space
  ;;   (setq indent-tabs-mode t)
  ;;   ;; indent 4 spaces width
  ;;   (kef/setup-indent 4))

  ;; (defun kef/spaces-code-style ()
  ;;   (interactive)
  ;;   (message "spaces code style!")
  ;;   ;; use space instead of tab
  ;;   (setq indent-tabs-mode nil)
  ;;   ;; indent 4 spaces width
  ;;   (kef/setup-indent 4))

  ;; (defun kef/setup-develop-environment ()
  ;;   (interactive)
  ;;   (let ((proj-dir (file-name-directory (buffer-file-name))))
  ;;     ;; if hobby project path contains string "hobby-proj1"
  ;;     (if (string-match-p "hobby-proj1" proj-dir)
  ;;         (kef/spaces-code-style))

  ;;     ;; if commericial project path contains string "commerical-proj"
  ;;     (if (string-match-p "commerical-proj" proj-dir)
  ;;         (kef/tabs-code-style))))

  ;; ;; prog-mode-hook requires emacs24+
  ;; (add-hook 'prog-mode-hook 'kef/setup-develop-environment)
  ;; ;; a few major-modes does NOT inherited from prog-mode
  ;; (add-hook 'lua-mode-hook 'kef/setup-develop-environment)
  ;; (add-hook 'web-mode-hook 'kef/setup-develop-environment)

  ;; ;; Just switch to tabs now.
  ;; (kef/tabs-code-style)
#+END_SRC

*** Sentence Endings
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)     ; Sentences should end in one space, come on!
#+END_SRC

*** FontAwesome
add an ivy-search for fontawesome icons. slick.
#+BEGIN_SRC emacs-lisp
  (use-package fontawesome :ensure t)
  (defun insert-fontawesome ()
    (interactive)
    (insert (call-interactively 'fontawesome)))
#+END_SRC

** User Interface
*** Xresources
ref: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Resources.html#Resources][Resources - GNU Emacs Manual]]
#+BEGIN_QUOTE
Emacs does not process X resources at all if you set the variable inhibit-x-resources to a non-nil value. If you invoke Emacs with the ‘-Q’ (or ‘--quick’) command-line option, inhibit-x-resources is automatically set to t.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (setq inhibit-x-resources t)
#+END_SRC

*** Minimal UI
Drop scroll bar, Toolbar, Tooltips and Menu-Bar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode   -1)
  (tooltip-mode    -1)
  (menu-bar-mode   -1)
#+END_SRC

No Bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

*** Modeline
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC
**** minions
Minions controls how minor-modes appear in our mode-line.
#+BEGIN_SRC emacs-lisp
  (use-package minions :ensure t)
  (minions-mode +1)
#+END_SRC

**** moody
Our current mode-line layout
#+BEGIN_SRC emacs-lisp
  (use-package moody :ensure
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+END_SRC

*** Point (Cursor)
Turn off the blinking cursor.
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (setq cursor-in-non-selected-windows t)  ; Hide the cursor in inactive windows
#+END_SRC

*** Startup screen
1. Scratch should be empty.
2. Don't display the help screen at start-up.
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
  (setq inhibit-startup-screen t)
#+END_SRC

*** Default Mode
Org-mode is just better, lets use it as our default.
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'org-mode)      ; org mode by default
#+END_SRC

*** Display org-mode agenda on startup
- https://stackoverflow.com/questions/23528287/how-to-display-custom-agenda-view-on-emacs-startup
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
            (lambda ()
              (org-agenda nil "d")
              (delete-other-windows)))
#+END_SRC

*** y-n not Yes-No
From http://pages.sachachua.com/.emacs.d/Sacha.html#sec-1-4-8

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Avoid native dialogues
#+BEGIN_SRC emacs-lisp
  (setq use-dialog-box nil)
#+END_SRC

*** Highlight matching parenthesis
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)

  (defun kef/locally-disable-show-paren ()
    (interactive)
    (setq show-paren-mode nil))

  (add-hook 'ruby-mode-hook
            #'kef/locally-disable-show-paren)

#+END_SRC

*** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode +1)
#+END_SRC

*** Fonts
#+BEGIN_SRC emacs-lisp
  ;; Test char and monospace:
  ;; 0123456789abcdefghijklmnopqrstuvwxyz [] () :;,. !@#$^&*
  ;; 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ {} <> "'`  ~-_/|\?
  (set-default-font "Iosevka Term Semibold 11")
  (add-to-list 'default-frame-alist
               '(font . "Iosevka Term Semibold 11"))
#+END_SRC

*** Themes
**** Theme toggles
#+BEGIN_SRC emacs-lisp
  (defvar *kef/theme-dark* 'doom-tomorrow-night)
  (defvar *kef/theme-light* 'doom-tomorrow-day)
  (defvar *kef/current-theme* *kef/theme-dark*)

  (defun kef/next-theme (theme)
    (if (eq theme 'default)
        (disable-theme *kef/current-theme*)
      (progn
        (load-theme theme t)))
    (setq *kef/current-theme* theme))

  (defun kef/toggle-theme ()
    (interactive)
    (cond ((eq *kef/current-theme* *kef/theme-dark*) (kef/next-theme *kef/theme-light*))
          ((eq *kef/current-theme* *kef/theme-light*) (kef/next-theme 'default))
          ((eq *kef/current-theme* 'default) (kef/next-theme *kef/theme-dark*))))
#+END_SRC

**** disable themes before we enable a new theme
- My understanding is such.  =load-theme= just puts whatever you call on top of
what is already existing.  This makes a lot of sense if your theme is modular.
- There may be a difference in how =emacs --daemon= and =emacsclient -nc= load
  themes as well.
#+BEGIN_SRC emacs-lisp
  ;; disable other themes before loading new one
  (defadvice load-theme (before theme-dont-propagate activate)
    "Disable theme before loading new one."
    (mapc #'disable-theme custom-enabled-themes))
#+END_SRC

**** zenburn & base16
Lets stop fucking around with broken themes and just use =zenburn=.
base16 seems to work well. perhaps we can find a light theme we like here.
#+BEGIN_SRC emacs-lisp
  ;; (use-package zenburn-theme :ensure t)
  (use-package base16-theme :ensure t)
#+END_SRC

**** doom-themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes :ensure)

  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)

#+END_SRC

**** enable-theme:
#+BEGIN_SRC emacs-lisp
  ;;(load-theme 'zenburn t t)
  ;;(load-theme 'base16-tomorrow t t)

  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  (load-theme 'doom-tomorrow-day t)
  ;; (load-theme 'dichromacy t)

#+END_SRC

*** Keystrokes repeat quickly
#+BEGIN_SRC emacs-lisp
  (setq echo-keystrokes 0.1)               ; Show keystrokes right away, don't show the message in the scratch buffer
#+END_SRC

*** Smooth Scrolling
Smooth scrolling means when you hit C-n to go to the next line
at the bottom of the page, instead of doing a page-down,
it shifts down by a single line. The margin means that
much space is kept between the cursor and the bottom of the buffer.
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 3
        scroll-conservatively 101
        scroll-up-aggressively 0.01
        scroll-down-aggressively 0.01
        scroll-preserve-screen-position t
        auto-window-vscroll nil
        hscroll-margin 5
        hscroll-step 5)
#+END_SRC

** Functions
*** Kill current buffer.
#+BEGIN_SRC emacs-lisp
  (defun kef/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  ;; Don't comfirm on kill buffer, just close it.
  (global-set-key (kbd "C-x k") 'kef/kill-current-buffer)
#+END_SRC

*** Visit emacs config
#+BEGIN_SRC emacs-lisp
  (defun kef/visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  ;; Jump to emacs config file.
  (global-set-key (kbd "C-c e") 'kef/visit-emacs-config)
#+END_SRC

*** youtube-dl
Fire off a youtube-dl process
#+BEGIN_SRC emacs-lisp
  (defun youtube-dl ()
    (interactive)
    (let* ((str (current-kill 0))
           (default-directory "~/Downloads")
           (proc (get-buffer-process (ansi-term "/bin/bash"))))
      (term-send-string
       proc
       (concat "cd ~/Downloads && youtube-dl " str "\n"))))
#+END_SRC

*** Ignore running processes when killing emacs
#+BEGIN_SRC emacs-lisp
  ;; add `flet'
  (require 'cl)

  (defadvice save-buffers-kill-emacs
    (around no-query-kill-emacs activate)
    "Prevent \"Active processes exist\" query on exit."
    (cl-flet ((process-list ())) ad-do-it))
#+END_SRC

*** import-chrome-bookmarks-as-org
#+BEGIN_SRC emacs-lisp
  ;; ref: https://www.reddit.com/r/emacs/comments/a3rajh/chrome_bookmarks_sync_to_org/
  (defvar kef/chrome-bookmarks-file
    (cl-find-if
     #'file-exists-p
     ;; Base on `helm-chrome-file'
     (list
      "~/.config/BraveSoftware/Brave-Browser/Default/Bookmarks"
      "~/Library/Application Support/Google/Chrome/Profile 1/Bookmarks"
      "~/Library/Application Support/Google/Chrome/Default/Bookmarks"
      "~/AppData/Local/Google/Chrome/User Data/Default/Bookmarks"
      "~/.config/google-chrome/Default/Bookmarks"
      "~/.config/chromium/Default/Bookmarks"
      (substitute-in-file-name
       "$LOCALAPPDATA/Google/Chrome/User Data/Default/Bookmarks")
      (substitute-in-file-name
       "$USERPROFILE/Local Settings/Application Data/Google/Chrome/User Data/Default/Bookmarks")))
    "Path to Google Chrome Bookmarks file (it's JSON).")

  (defun kef/chrome-bookmarks-insert-as-org ()
    "Insert Chrome/Brave Bookmarks as org-mode headings."
    (interactive)
    (require 'json)
    (require 'org)
    (let ((data (let ((json-object-type 'alist)
                      (json-array-type  'list)
                      (json-key-type    'symbol)
                      (json-false       nil)
                      (json-null        nil))
                  (json-read-file kef/chrome-bookmarks-file)))
          level)
      (cl-labels ((fn
                   (al)
                   (pcase (alist-get 'type al)
                     ("folder"
                      (insert
                       (format "%s %s\n"
                               (make-string level ?*)
                               (alist-get 'name al)))
                      (cl-incf level)
                      (mapc #'fn (alist-get 'children al))
                      (cl-decf level))
                     ("url"
                      (insert
                       (format "%s %s\n"
                               (make-string level ?*)
                               (org-make-link-string
                                (alist-get 'url al)
                                (alist-get 'name al))))))))
        (setq level 1)
        (fn (alist-get 'bookmark_bar (alist-get 'roots data)))
        (setq level 1)
        (fn (alist-get 'other (alist-get 'roots data))))))
#+END_SRC

*** Insert line below or above with s-<return>
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-07-05 Fri 14:52]
:END:
These bindings conflict with i3
#+BEGIN_SRC emacs-lisp
  (defun smart-open-line ()
    "Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode."
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))

  (defun smart-open-line-above ()
    "Insert an empty line above the current line. Position the cursor at it's beginning, according to the current mode."
    (interactive)
    (move-beginning-of-line nil)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))

  (global-set-key (kbd "s-<return>") 'smart-open-line) ;; This is bound to "new-terminal" in i3.
  (global-set-key (kbd "s-S-<return>") 'smart-open-line-above) ;; This currently is not bound to anything in i3.
#+END_SRC

** Buffer movement and Splits
Move between open windows with =M-o= as well as =C-x o=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC

*** TODO Window (Buffer) splits and closures
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-07-04 Thu 21:49]
:END:
Removed super-key usage here and replicated i3-like bindings with C- instead of S-.
#+BEGIN_SRC emacs-lisp
  (defun vsplit-last-buffer ()
    (interactive)
    (split-window-vertically)
    (other-window 1 nil)
    (switch-to-next-buffer))

  (defun hsplit-last-buffer ()
    (interactive)
    (split-window-horizontally)
    (other-window 1 nil)
    (switch-to-next-buffer))
  ;; lets use something other than S or F? S is for search. F is Forward. Left hand side key? C-u?
  (global-set-key (kbd "C-q") (kbd "C-x 0")) ;; Like our i3 config of s-q ;; F is used by emacs for movement.. duh.
  (global-set-key (kbd "C-S-q") (kbd "C-x 1")) ;; close others with shift. In i3 the translation would be mod$-shift

  (global-set-key (kbd "C-u") 'hsplit-last-buffer)   ;; i3: mod-s
  (global-set-key (kbd "C-S-u") 'vsplit-last-buffer) ;; i3: mod-shift-s
#+END_SRC

** Ivy, Swiper and Counsel.
The Holy Trinity
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-07-04 Thu 21:48]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ivy :ensure
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)

    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
          '((swiper . ivy--regex-plus)
            (t      . ivy--regex-fuzzy)))   ;; enable fuzzy searching everywhere except for Swiper
    (global-set-key (kbd "C-S-F") 'ivy-resume))

  (use-package swiper :ensure
    :config
    (global-set-key (kbd "C-s") 'swiper)) ;; use swiper-search bound to C-f like browsers. This will take awhile to get used to.

  (use-package counsel :ensure
    :config
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "M-y") 'counsel-yank-pop)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)

    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate))

  (use-package smex :ensure)
  (use-package flx :ensure)
  (use-package avy :ensure
      :bind
  ("C-c SPC" . avy-goto-char))
#+END_SRC

Ivy-rich make Ivy a bit more friendly by adding information to ivy buffers, e.g. description of commands in =M-x=, meta info about buffers in =ivy-switch-buffer=, etc.

#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich :ensure
    :config
    (ivy-rich-mode 1)
    (setq ivy-rich-path-style 'abbrev)) ;; To abbreviate paths using abbreviate-file-name (e.g. replace “/home/username” with “~”
#+END_SRC

** TODO Text Formatting, Selection and Editing
- [ ] look at [[https://github.com/freetonik/emacs-dotfiles/blob/master/init.org#navigation-and-editing][freetonik's]] bindings for text selection that are more os-x like.  I really do
  want to avoid using the Super-key in Linux for anything other than our Window
  manager. IIRC, OSX uses the CMD(Apple) key as Super in emacs.
- [ ] [[https://stackoverflow.com/questions/162896/emacs-on-mac-os-x-leopard-key-bindings][handy list of OSX keybindings]]

*** Save my location within a file
Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.

#+BEGIN_SRC emacs-lisp
  (save-place-mode t)
#+END_SRC

*** Cut/copy/comment current line if no region selected
via: https://caolan.org/dotfiles/emacs.html#org172314d
#+BEGIN_QUOTE
In many programs, like SlickEdit, TextMate and VisualStudio, “cut” and “copy” act on the current line if no text is visually selected. For this, I originally used code from Tim Krones Emacs config, but now I'm using the whole-line-or-region package, which can be customised to use the same line-or-region style for comments too. See comments in whole-line-or-region.el for details.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package whole-line-or-region :ensure)
  (add-to-list 'whole-line-or-region-extensions-alist
               '(comment-dwim whole-line-or-region-comment-dwim nil))
  (whole-line-or-region-mode 1)
#+END_SRC
*** Trailing white space removal
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq require-final-newline t)
#+END_SRC

*** TODO Col-wrap
Not sure I actually like this, I'd rather have a soft-wrap so it can flow into
the window size?
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook
            '(lambda() (set-fill-column 80)))
  ;; lets just do it globally
  (setq-default fill-column 80)
#+END_SRC

*** TODO Visual feedback on replacement with regex
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-06-16 Sun 17:55]
:END:
Control-R is still launching backwards-isearch sometimes.
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :config
    (define-key global-map (kbd "C-r") 'vr/replace))
#+END_SRC

*** Expanding a Selection of Text
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-07-04 Thu 21:56]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package expand-region :ensure
    :config
    (global-set-key (kbd "M-]") 'er/expand-region)
    (global-set-key (kbd "M-[") 'er/contract-region))
  #+END_SRC

*** TODO multiple-cursors
- https://github.com/magnars/multiple-cursors.el
We need to configure some keybindings. Check out the github page for
suggestions.
Make <return> insert a newline; multiple-cursors-mode disables with C-g.

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (setq mc/always-run-for-all 1)
    (global-set-key (kbd "C-=") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-+") 'mc/mark-all-dwim)
    (define-key mc/keymap (kbd "<return>") nil))
#+END_SRC

** File Browsing
I'm not in love with any of this. Maybe we'll scrap it and start over soon.

Dried shortcut to *R*un an application
#+BEGIN_SRC emacs-lisp
  (define-key dired-mode-map "r" 'dired-start-process)
#+END_SRC
Tell dried what types of files to open with what.
#+BEGIN_SRC emacs-lisp
  ;; (require 'dired-x)

  ;; (setq dired-guess-shell-alist-user
  ;;       '(("\\.pdf\\'" "zathura" "evince" "okular")
  ;;         ("\\.\\(?:djvu\\|eps\\)\\'" "evince")
  ;;         ("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" "eog")
  ;;         ("\\.\\(?:xcf\\)\\'" "gimp")
  ;;         ("\\.csv\\'" "libreoffice")
  ;;         ("\\.tex\\'" "pdflatex" "latex")
  ;;         ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|ogv\\)\\(?:\\.part\\)?\\'"
  ;;          "vlc")
  ;;         ("\\.\\(?:mp3\\|flac\\)\\'" "rhythmbox")
  ;;         ("\\.html?\\'" "brave-browser")
  ;;         ("\\.cue?\\'" "audacious")))
#+END_SRC
Add nohup to vlc launch.
#+BEGIN_SRC emacs-lisp
  ;; (require 'dired-aux)

  ;; (defvar dired-filelist-cmd
  ;;   '(("vlc" "-L")))

  ;; (defun dired-start-process (cmd &optional file-list)
  ;;   (interactive
  ;;    (let ((files (dired-get-marked-files
  ;;                  t current-prefix-arg)))
  ;;      (list
  ;;       (dired-read-shell-command "& on %s: "
  ;;                                 current-prefix-arg files)
  ;;       files)))
  ;;   (let (list-switch)
  ;;     (start-process
  ;;      cmd nil shell-file-name
  ;;      shell-command-switch
  ;;      (format
  ;;       "nohup 1>/dev/null 2>/dev/null %s \"%s\""
  ;;       (if (and (> (length file-list) 1)
  ;;                (setq list-switch
  ;;                      (cadr (assoc cmd dired-filelist-cmd))))
  ;;           (format "%s %s" cmd list-switch)
  ;;         cmd)
  ;;       (mapconcat #'expand-file-name file-list "\" \"")))))
#+END_SRC

* Languages
** TODO Linting
Linting. Enable this and add backends as required.
#+BEGIN_SRC emacs-lisp
;;  (use-package flycheck :ensure)
#+END_SRC

** Commenting Code
:LOGBOOK:
- State "DONE"       from "WAITING"    [2019-06-14 Fri 07:52]
- State "WAITING"    from              [2019-01-29 Tue 14:50] \\
  Look into having this work for literate programming. It currently does not work
  in =SRC= blocks nor the buffer opened with =C-'=.  Perhaps we can at least get
  the latter working and push upstream.
:END:
#+BEGIN_SRC emacs-lisp
  (use-package comment-dwim-2 :ensure t)
  (global-set-key (kbd "M-;") 'comment-dwim-2)
#+END_SRC

** HTML & CSS
Use web-mode for muxed html/css/js
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode "\\.html?\\'"
    :config
    (progn
      (setq web-mode-markup-indent-offset 4)
      (setq web-mode-code-indent-offset 4)
      (setq web-mode-enable-current-element-highlight t)
      (setq web-mode-enable-auto-expanding t)
      ))
#+END_SRC

Rainbow-mode sets hexcodes as background color in html/css files. Handy.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode :ensure)
#+END_SRC
Turn on rainbow-mode for web/css.
#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook #'rainbow-mode)
  (add-hook 'css-mode-hook #'rainbow-mode)
#+END_SRC

** JavaScript
#+BEGIN_SRC emacs-lisp
  ;; js2-mode
  ;; https://github.com/mooz/js2-mode
  (use-package js2-mode :ensure
    :bind (:map js2-mode-map
                (("C-x C-e" . js-send-last-sexp)
                 ("C-M-x" . js-send-last-sexp-and-go)
                 ("C-c C-b" . js-send-buffer-and-go)
                 ("C-c C-l" . js-load-file-and-go)))
    :mode
    ("\\.js$" . js2-mode)
    ("\\.json$" . js2-jsx-mode)
    :config
    (custom-set-variables '(js2-strict-inconsistent-return-warning nil))
    (custom-set-variables '(js2-strict-missing-semi-warning nil))

    (setq js-indent-level 4)
    (setq js2-indent-level 4)
    (setq js2-basic-offset 4)
    (setq js2-highlight-level 1)         ; some highlighting.
    '(js2-auto-indent-p t)               ; it's nice for commas to right themselves.
    '(js2-enter-indents-newline t)       ; don't need to push tab before typing
    '(j2-indent-on-enter-key t)

    ;; tern :- IDE like features for javascript and completion
    ;; http://ternjs.net/doc/manual.html#emacs
    (use-package tern :ensure
      :config
      (defun kef/js-mode-hook ()
        "Hook for `js-mode'."
        (set (make-variable 'company-backends)
             '((company-tern company-files))))
      (add-hook 'js2-mode-hook 'kef/js-mode-hook)
      (add-hook 'js2-mode-hook 'company-mode))

    (add-hook 'js2-mode-hook 'tern-mode)

    ;; company backend for tern
    ;; http://ternjs.net/doc/manual.html#emacs
    (use-package company-tern :ensure)

    ;; Run a JavaScript interpreter in an inferior process window
    ;; https://github.com/redguardtoo/js-comint
    (use-package js-comint :ensure
      :config
      (setq inferior-js-program-command "node"))

    ;; js2-refactor :- refactoring options for emacs
    ;; https://github.com/magnars/js2-refactor.el
    (use-package js2-refactor :defer t
      :diminish js2-refactor-mode
      :config
      (js2r-add-keybindings-with-prefix "C-c j r"))
    (add-hook 'js2-mode-hook 'js2-refactor-mode))
#+END_SRC

** R
Let's get emacs talking with R.  We need to let emacs know how to run R Code.
#+BEGIN_SRC emacs-lisp
  ;;(use-package ess :ensure)
#+END_SRC

** TODO emacs-lsp
Lets get this working one day.
* Extended Configuration
** Abbrevs, Auto-completion & Snippets
*** Company Mode
Use =company-mode= everywhere
#+BEGIN_SRC emacs-lisp
  (use-package company :ensure)
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

**** Use =M-/= for completion.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'company-complete-common)
#+END_SRC

**** TODO Add company back-ends
#+BEGIN_SRC emacs-lisp
  ;;  add company back-ends
#+END_SRC

*** YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet :ensure)
  (use-package yasnippet-snippets
    :after yasnippet
    :config (yasnippet-snippets-initialize))

  (use-package yasnippet
    :delight yas-minor-mode " υ"
    :hook (yas-minor-mode . kef/disable-yas-if-no-snippets)
    :config (yas-global-mode)
    :preface
    (defun kef/disable-yas-if-no-snippets ()
      (when (and yas-minor-mode (null (yas--get-snippet-tables)))
        (yas-minor-mode -1))))

  (use-package ivy-yasnippet :after yasnippet)
  (use-package react-snippets :after yasnippet)

  ;; (yas-reload-all)
  ;; (add-hook 'prog-mode-hook #'yas-minor-mode)
  ;; (yas-global-mode 1)
#+END_SRC

*** Abbreviations
#+BEGIN_SRC emacs-lisp
  (setq quietly-read-abbrev-file t)
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs")
#+END_SRC

** Dictionary
- http://mbork.pl/2017-01-14_I'm_now_using_the_right_dictionary
- Perhaps add our sweet Dictionary instead of this, but for now this works.
#+BEGIN_SRC emacs-lisp
  (use-package define-word :ensure)
  (global-set-key (kbd "C-c d") 'define-word-at-point)
  (global-set-key (kbd "C-c D") 'define-word)
#+END_SRC

** Thesaurus
- thesaurus.el
- synonymous.el
#+BEGIN_SRC emacs-lisp
  (use-package synonymous :ensure)
#+END_SRC

** Spellchecking
flyspell - in all text modes
[[https://emacs.stackexchange.com/questions/31300/can-you-turn-on-flyspell-for-comments-but-not-strings][flypsell for comments, but not strings]]
#+BEGIN_SRC emacs-lisp
  (use-package flyspell :ensure)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode) ;; Flyspell in program mode.
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1)))) ;; On for text-mode
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1)))) ;; Off for log and change-log mode.
#+END_SRC

** Weasel Words
#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode :ensure)
  (add-hook 'text-mode-hook 'writegood-mode)
#+END_SRC

** Version Control
- [[http://www.modernemacs.com/post/pretty-magit/][Pretty Magit - Integrating commit leaders | Modern Emacs]]
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure
    :config
    (setq magit-completing-read-function 'ivy-completing-read)

    :bind
    ;; Magic
    ("C-x g s" . magit-status)
    ("C-x g x" . magit-checkout)
    ("C-x g c" . magit-commit)
    ("C-x g p" . magit-push)
    ("C-x g u" . magit-pull)
    ("C-x g e" . magit-ediff-resolve)
    ("C-x g r" . magit-rebase-interactive))

  (use-package magit-popup)
#+END_SRC

And show changes in the gutter (fringe).
*** TODO magit-git-gutter
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package git-gutter
    :config
    (global-git-gutter-mode 't)
    (set-face-background 'git-gutter:modified 'nil) ;; background color
    (set-face-foreground 'git-gutter:added "green4")
    (set-face-foreground 'git-gutter:deleted "red"))
#+END_SRC

** Email
mu, 4 emacs
[https://www.djcbsoftware.nl/code/mu/mu4e/][mu4e docs]
*** mu4e
Use org structures and tables in message mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'message-mode-hook 'turn-on-orgtbl)
  (add-hook 'message-mode-hook 'turn-on-orgstruct++)
#+END_SRC

We're using mbsync to pull in our email.  We should have systemd scripts in
=~/.config/systemd/user/= [[https://bostonenginerd.com/posts/notmuch-of-a-mail-setup-part-1-mbsync-msmtp-and-systemd/][src]]
#+BEGIN_QUOTE
To start the timer, you should type systemctl --user start checkmail.timer.
Using the command systemctl --user status checkmail.timer will allow you to see
if the timer was successfully started.
To start the timer automatically, issue the systemctl --user start checkmail.timer command.

Another neat command is systemctl --user list-timers. This will list all of the timers that you have active and how long until they’re triggered again. Neat stuff. Systemd is pretty clever.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  ;; installed from release.
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
  (require 'mu4e)

  (setq mu4e-maildir       "~/.mail")   ;; top-level Maildir

  ;; from https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/elgoumx
  (add-hook 'mu4e-headers-mode-hook
            (defun my/mu4e-change-headers ()
              (interactive)
              (setq mu4e-headers-fields
                    `((:human-date . 25) ;; alternatively, use :date
                      (:flags . 6)
                      (:from . 22)
                      (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
                      (:size . 7)))))

  ;; if you use date instead of human-date in the above, use this setting
  ;; give me ISO(ish) format date-time stamps in the header list
  ;; (setq mu4e-headers-date-format "%Y-%m-%d %H:%M")

                                          ; get mail
  (setq mu4e-get-mail-command "mbsync -c ~/.mbsyncrc -a"
        ;; mu4e-html2text-command "w3m -T text/html" ;;using the default mu4e-shr2text
        mu4e-view-prefer-html t
        mu4e-update-interval 300
        mu4e-headers-auto-update t
        mu4e-compose-signature-auto-include nil
        mu4e-compose-format-flowed t)

  ;; to view selected message in the browser, no signin, just html mail
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  ;; enable inline images
  (setq mu4e-view-show-images t)
  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; every new email composition gets its own frame!
  (setq mu4e-compose-in-new-buffer t)

  ;; Note: This shows no email, wonder if it's been fixed in 1.0
  ;; Ignore duplicates
  (setq mu4e-headers-skip-duplicates t)

  ;; GMail already adds sent mail to the Sent Mail folder.
  (setq mu4e-sent-messages-behavior 'delete)

  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)
  ;;rename files when moving
  ;;NEEDED FOR MBSYNC
  (setq mu4e-change-filenames-when-moving t)

  ;;set up queue for offline email
  ;;use mu mkdir  ~/Maildir/acc/queue to set up first
  (setq smtpmail-queue-mail nil)  ;; start in normal mode

  ;;from the info manual
  (setq mu4e-attachment-dir  "~/Downloads")
  (setq mu4e-compose-dont-reply-to-self t)

  (require 'org-mu4e)

  ;; convert org mode to HTML automatically
  ;; (setq org-mu4e-convert-to-html t)  ;; Until we can squelch the TOC, we're leaving this off.

  ;;from vxlabs config
  ;; show full addresses in view message (instead of just names)
  ;; toggle per name with M-RET
  (setq mu4e-view-show-addresses 't)

  ;; Some hooks
  (add-hook 'mu4e-view-mode-hook #'visual-line-mode)
  (add-hook 'mu4e-compose-mode-hook #'org-mu4e-compose-org-mode)
  (add-hook 'mu4e-compose-mode-hook #'toc-org-mode -1)  ;; really don't want a table of contents in our emails
  ;; but this is the wrong place to fix this. It's likely happening when the EXPORT of the email to HTML occurs.
  (add-hook 'mu4e-compose-mode-hook 'use-hard-newlines -1)
  (add-hook 'mu4e-compose-mode-hook #'flyspell-mode)

  ;; enable format=flowed
  ;; - mu4e sets up visual-line-mode and also fill (M-q) to do the right thing
  ;; - each paragraph is a single long line; at sending, emacs will add the
  ;;   special line continuation characters.
  ;; - also see visual-line-fringe-indicators setting below
  (setq mu4e-compose-format-flowed t)
  ;; because it looks like email clients are basically ignoring format=flowed,
  ;; let's complicate their lives too. send format=flowed with looong lines. :)
  ;; https://www.ietf.org/rfc/rfc2822.txt
  (setq fill-flowed-encode-column 998)
  ;; in mu4e with format=flowed, this gives me feedback where the soft-wraps are
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))

  ;; This hook correctly modifies the \Inbox and \Starred flags on email when they are marked.
  ;; Without it refiling (archiving) and flagging (starring) email won't properly result in
  ;; the corresponding gmail action.
  (add-hook 'mu4e-mark-execute-pre-hook
            (lambda (mark msg)
              (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox"))
                    ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
                    ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred")))))

  ;; mu4e uses its own version of message-mode. The only benefit I know of is that it enables completion for To, CC and BCC fields. That is really useful though!
  (setq mail-user-agent 'mu4e-user-agent)

  ;; For some reason it uses its own signature variable. Not anymore!
  (defvaralias 'mu4e-compose-signature 'message-signature)

  (setq mu4e-completing-read-function 'ivy-completing-read
        mu4e-confirm-quit nil) ; Ivy for completion
#+END_SRC

*** mu4e-context
#+BEGIN_SRC emacs-lisp
  ;; Set contexts based on if it's a gmail account or not.
  ;; ref: http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
  ;; This sets up my two different context for my personal and school emails
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-context-policy 'always-ask)
  (setq mu4e-contexts
	(list
	 (make-mu4e-context    ;; me@kfring.com
	  :name "me@kfring"
	  :enter-func (lambda () (mu4e-message "Switch to the me@kfring context"))
	  :match-func (lambda (msg)
			(when msg
			  (mu4e-message-maildir-matches msg "^/kfring")))
	  :leave-func (lambda () (mu4e-clear-caches))
	  :vars '(
		  (user-mail-address     . "me@kfring.com")
		  (user-full-name        . "Kyle Fring")
		  (mu4e-sent-folder      . "/kfring/Sent")
		  (mu4e-drafts-folder    . "/kfring/Drafts")
		  (mu4e-trash-folder     . "/kfring/Trash")
		  (mu4e-refile-folder    . "/kfring/All-Mail")
		  )
	  )
	 )
	)
#+END_SRC

*** Sending email
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-07-05 Fri 20:45]
:END:
#+BEGIN_SRC emacs-lisp
  ;; sending mail -- replace USERNAME with your gmail username
  ;; also, make sure the gnutls command line utils are installed
  ;; package 'gnutls-bin' in Debian/Ubuntu, 'gnutls' in Archlinux.

  (require 'smtpmail)

  (setq message-send-mail-function 'smtpmail-send-it
	starttls-use-gnutls t
	smtpmail-starttls-credentials
	'(("smtp.gmail.com" 587 nil nil))
	smtpmail-auth-credentials
	(expand-file-name "~/.authinfo.gpg")
	smtpmail-default-smtp-server "smtp.gmail.com"
	smtpmail-smtp-server "smtp.gmail.com"
	smtpmail-smtp-service 587
	smtpmail-debug-info t)
#+END_SRC

*** mu4e-conversations
#+BEGIN_SRC emacs-lisp
  (use-package mu4e-conversation :ensure :after mu4e)
  ;; Use it everywhere
  (global-mu4e-conversation-mode)
#+END_SRC

*** [[#mu4e-1][mu4e-hydra]]
*** mu4e-alert
#+BEGIN_SRC emacs-lisp
  (use-package mu4e-alert :ensure
      :after mu4e
      :hook ((after-init . mu4e-alert-enable-mode-line-display)
             (after-init . mu4e-alert-enable-notifications))
      :config (mu4e-alert-set-default-style 'libnotify))

  ;; (use-package mu4e-alert
  ;;   :ensure t
  ;;   :after mu4e
  ;;   :init
  ;;   (setq mu4e-alert-interesting-mail-query
  ;;     (concat
  ;;      "flag:unread maildir:/Exchange/INBOX "
  ;;      "OR "
  ;;      "flag:unread maildir:/Gmail/INBOX"
  ;;      ))
  ;;   (mu4e-alert-enable-mode-line-display)
  ;;   (defun gjstein-refresh-mu4e-alert-mode-line ()
  ;;     (interactive)
  ;;     (mu4e~proc-kill)
  ;;     (mu4e-alert-enable-mode-line-display)
  ;;     )
  ;;   (run-with-timer 0 60 'gjstein-refresh-mu4e-alert-mode-line)
  ;;   )
#+END_SRC

** News Reader
Elfeed is a very nice RSS/Atom reader for emacs.
*** Key Bindings
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :demand
    :config
    :bind (:map elfeed-search-mode-map
                ("A" . kef/elfeed-show-all)
                ("U" . kef/elfeed-show-unread)
                ("C" . kef/elfeed-show-comics)
                ("N" . kef/elfeed-show-news)
                ("S" . kef/elfeed-show-starred)
                ("q" . kef/elfeed-save-db-and-bury)))
   (global-set-key (kbd "C-x r") 'kef/elfeed-load-db-and-open) ; r for reader
#+END_SRC
*** Shortcut functions and Hooks
src: http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/
#+BEGIN_SRC emacs-lisp
  ;; show all
  (defun kef/elfeed-show-all ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-all"))
  ;; show just unread
  (defun kef/elfeed-show-unread ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-unread"))
  ;; show me comics, mostly xkcd
  (defun kef/elfeed-show-comics ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-comics"))
  ;; just news
  (defun kef/elfeed-show-news ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-news"))
  ;; shortcut to jump to starred bookmark
  (defun kef/elfeed-show-starred ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-starred"))
#+END_SRC

ref: [[http://pragmaticemacs.com/emacs/star-and-unstar-articles-in-elfeed/][Star and unstar articles in elfeed | Pragmatic Emacs]]
Adding the concept of *stars* to elfeed, along with hooks etc.

#+BEGIN_SRC emacs-lisp
  ;; code to add and remove a starred tag to elfeed article
  ;; based on http://matt.hackinghistory.ca/2015/11/22/elfeed/
  ;; http://pragmaticemacs.com/emacs/star-and-unstar-articles-in-elfeed/#disqus_thread
  ;; more concise version from user: Galrog. Slick.

  (defalias 'elfeed-toggle-star
   (elfeed-expose #'elfeed-search-toggle-all 'star))

  (eval-after-load 'elfeed-search
   '(define-key elfeed-search-mode-map (kbd "m") 'elfeed-toggle-star))

  ;; tried *, but m requires one less hand and is closer to the "n" key which were using constantly in this mode.
#+END_SRC

A colored face for a =starred= entry.
#+BEGIN_SRC emacs-lisp
  ;; (defface elfeed-search-starred-title-face
  ;;   '((t :foreground "#f77"))
  ;;   "Marks a starred Elfeed entry.")

  ;; (push '(starred elfeed-search-starred-title-face) elfeed-search-face-alist)
#+END_SRC

Functions to support syncing .elfeed between machines
makes sure elfeed reads index from disk before launching
#+BEGIN_SRC emacs-lisp
  (defun kef/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-update))

  ;;write to disk when quiting
  (defun kef/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))
#+END_SRC

Adjusting variable-face
#+BEGIN_SRC emacs-lisp
    (defun kef/show-elfeed (buffer)
      (with-current-buffer buffer
        (setq buffer-read-only nil)
        (goto-char (point-min))
        (re-search-forward "\n\n")
        (fill-individual-paragraphs (point) (point-max))
        (setq buffer-read-only t))
      (switch-to-buffer buffer))

  (setq elfeed-show-mode-hook
        (lambda ()
      (set-face-attribute 'variable-pitch (selected-frame) :font (font-spec :family "IBM Plex Serif" :foundry "IBM " :height 100))
      (setq fill-column 120)
      (setq elfeed-show-entry-switch #'kef/show-elfeed)))
#+END_SRC
*** elfeed-goodies
Thought it was cute, idk. Might delete later.
#+BEGIN_SRC emacs-lisp
  ;; (use-package elfeed-goodies
  ;;   :ensure t
  ;;   :config
  ;;   (elfeed-goodies/setup))
#+END_SRC
*** elfeed-org
Cool, we get to use org-mode to manage our feeds. <3
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :ensure t
    :requires (elfeed)
    :config
    ;; start
    (elfeed-org)
    ;; location of feed orgfile
    (setq rmh-elfeed-org-files (list "~/org/feeds.org")))
#+END_SRC

** Terminals
Launch a shell with C-t.
#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :bind (("C-t" . shell-pop))
    :config
    (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
    (setq shell-pop-term-shell "/bin/bash")
    ;; need to do this manually or not picked up by `shell-pop'
    (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))
#+END_SRC

** Packages
*** Which-Key
=which-key= displays the possible completions for a long keybinding. That's
really helpful for some modes (like =projectile=, for example).

#+BEGIN_SRC emacs-lisp
  (use-package which-key :ensure
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1.0))
#+END_SRC

** Org-Mode
A good enough reason to use Emacs on it's own.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-startup-indented t)           ;; Indent org-file display
    (setq org-src-tab-acts-natively t)
    )
#+END_SRC

Lets not mistakenly edit collapsed text.
#+BEGIN_SRC emacs-lisp
  (setq-default org-catch-invisible-edits 'smart)
#+END_SRC

Set some org-mode keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

*** Org file locations
Store all my org files in =~/org=, which is symlinked to ~/Dropbox/org/.
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org")
#+END_SRC

*** Refile Targets
Refile targets should include all files? and down to 9 levels into them.
Work on this later to make the refile targets make sense for our workflow.
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 3))))

  (setq org-outline-path-complete-in-steps nil)         ;; Refile in a single go
  (setq org-refile-use-outline-path t)                  ;; Show full paths for refiling

  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
#+END_SRC
**** TODO refile targets for blog once we get ox-hugo working.
*** TODO org-agenda
TODO: Maybe remove this custom view and replace it with super-agenda package

I cannot seem to make up my mind here.  I suppose with Swiper and Ivy it doesn't
matter to much. Refile targets seem to be more important to have limits on.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org/life.org"
                           "~/org/work.org"
                           "~/org/edu.org"
                           "~/.emacs.d/config.org"))
#+END_SRC

Org-Habit
#+BEGIN_SRC emacs-lisp
  ; Enable habit tracking
  (setq org-modules (quote (org-habit)))

  ; position the habit graph on the agenda to the right of the default
  (setq org-habit-graph-column 50)

  (setq org-habit-show-habits-only-for-today t)
  (set 'org-habit-show-all-today t)
  (setq org-habit-graph-column 60)
  (setq org-habit-following-days 3)

  (setq org-habit-today-glyph ?‖)
  (setq org-habit-completed-glyph ?✓)
#+END_SRC

Crafty org-agenda view stuff including habits from [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaron Beiber]]
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "" ((org-agenda-ndays 1)))
            (alltodo ""
                     ((org-agenda-skip-function '(or (kef/org-skip-subtree-if-habit)
                                                     (kef/org-skip-subtree-if-priority ?A)
                                                     (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:"))))
           ((org-agenda-compact-blocks t)))))

  (defun kef/org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))
  (defun kef/org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))
#+END_SRC

Set a keybinding of =Super-s= to bring up this view.
#+BEGIN_SRC emacs-lisp
  (defun kef/pop-to-org-agenda (&optional split)
    "Visit the org agenda, in the current window or a SPLIT."
    (interactive "P")
    (org-agenda nil "d")
    (when (not split)
      (delete-other-windows)))

  ;; (global-set-key (kbd "s-s") 'kef/pop-to-org-agenda)  ;; We're not really using this? Maybe we are. Revist later
#+END_SRC
*** Colorize SRC blocks
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

*** Org-TODO Keywords
#+BEGIN_SRC emacs-lisp
  ;;(setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)")))

  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))

  (setq org-todo-keyword-faces
        (quote (("NEXT" :foreground "cyan" :weight bold)
                ("DONE" :foreground "gray" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "gray" :weight bold))))
#+END_SRC

Don't harass me while I'm just changing keyword states, thanks!
#+BEGIN_SRC emacs-lisp
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC

Lets add tags to our items?
#+BEGIN_SRC emacs-lisp
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC

*** Capture templates
ref: https://orgmode.org/manual/Template-elements.html#Template-elements
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(("t" "Todo [life]" entry
                                 ;; A list of things to do that I do NOT get direct compensation for.
                                 ;; These things will get refiled into life.org or edu.org eventually.
                                 ;; Think about if it is more efficacious to just put them in directly or do the whole weekly refile thing.
                                 (file+headline "~/org/life.org" "INBOX")
                                 "* TODO %i%? \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :prepend t)

                                ;; A todo list for things I get paid money for.
                                ("w" "Todo [work]" entry (file+headline "~/org/work.org" "Tasks")
                                 "* TODO %i%? \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :prepend t)

                                ;; a place to keep ideas for some other time.  Ideas for Projects that we could maybe one-day accomplish
                                ("m" "New Idea" entry (file+headline "~/org/ideas.org" "Ideas")
                                 "* WAITING %^{Short Description}\n:PROPERTIES:\n:CREATED: %U\n:END:\n%?%^{More details?}\n" :prepend t)

                                ;; general Note Capture
                                ("n" "Note" entry (file+headline "~/org/life.org" "INBOX")
                                 "* %^{Title}\n:PROPERTIES:\n:CREATED: %U\n:END:\n%^{Content}" :empty-lines 1)

                                ;; Album capture for weekly item.
                                ;; Artist Name: #main > div > div.Root__top-container > div.Root__main-view.Root__main-view--has-upsell-bar > div > div > div > section > div > div > div.col-xs-12.col-lg-3.col-xl-4 > div > header > div:nth-child(1) > div > div > div.mo-meta.ellipsis-one-line > div > a
                                ;; Album Name: #main > div > div.Root__top-container > div.Root__main-view.Root__main-view--has-upsell-bar > div > div > div > section > div > div > div.col-xs-12.col-lg-3.col-xl-4 > div > header > div:nth-child(1) > div > div > div:nth-child(1) > div.mo-info > div > div
                                ;; Album Artwork: #main > div > div.Root__top-container > div.Root__main-view.Root__main-view--has-upsell-bar > div > div > div > section > div > div > div.col-xs-12.col-lg-3.col-xl-4 > div > header > div:nth-child(1) > div > div > div:nth-child(1) > div.react-contextmenu-wrapper > div > div > div.cover-art-image.cover-art-image-loaded
                                ;; Album Year and Track #: #main > div > div.Root__top-container > div.Root__main-view.Root__main-view--has-upsell-bar > div > div > div > section > div > div > div.col-xs-12.col-lg-3.col-xl-4 > div > header > div.TrackListHeader__body > p

                                ;; Things to remove?
                                ;; Locallity
                                ;; Running Time
                                ;; Add Album cover?

                                ;; Not cute that we're using the year here, but file+headline does not support variables and it's one second every twelve months. Whatever.
                                ("a" "Album Notes" entry
                                 (file+headline "~/org/albums.org" "Albums" "2019")
                                 "*** %u %^{Artist} - %^{Album Name}\n:PROPERTIES:\n:CREATED: %U\n:END:\n- Release: %^{Release}\n- Link: [[%^{URL}][Spotify]]\n- Tracks: %^{Tracks}\n- Playtime: %^{Playtime}\n- %^{Content}\n%?" :prepend t :empty-lines 1)

                                ;; Date-tree
                                ("j" "Journal" entry (file+datetree "~/org/journal.org")
                                 "* %?\nEntered on %U\n  %i\n  %a")

                                ;; Climbing capture templates
                                ;; use %u for non-interactive time-stamps
                                ("r" "Route" table-line
                                 (file+headline "~/org/life.org" "Climbing" "Routes")
                                 "|%u|%?%^{Route Name?|NA}|%^{Yosemite Grade?|5.}|%^{Attempts?|0}|%^{Style?|Sport|Trad}|%^{Notes?}|")

                                ("b" "Boulder Problem" table-line
                                 (file+headline "~/org/life.org" "Climbing" "Boulder Problems")
                                 "|%u|%?%^{Problem Name?|NA}|%^{V-Grade?|NA}|%^{Attempts?|0}|%^{Notes?}|")
                                ))
#+END_SRC

*** Log into drawer
#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer t)
#+END_SRC

*** log when "DONE"
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC
*** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets)
  (setq org-bullets-bullet-list '("◉" "◎" "⚫" "○" "►" "◇"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

*** org-pomodoro
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-06-14 Fri 07:33]
:END:
I'm not in love with this package.
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro :ensure)
#+END_SRC

*** TODO org-cliplink
- https://github.com/rexim/org-cliplink
We can now replace our link-capture-template with this one?
#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink :ensure t)
  (global-set-key (kbd "C-x p i") 'org-cliplink)
#+END_SRC

*** TODO org-download
Can we use org-download to set files to be saved in specific locations?????
*** Table of Contents
[[https://github.com/rememberYou/.emacs.d/blob/master/config.org#org-mode][src]]
If like me, you’re tired of manually updating your tables of contents, toc-org will maintain a table of contents at the first heading that has a :TOC: tag.
#+BEGIN_SRC emacs-lisp
  (use-package toc-org)
  ;; :after org
  ;; :hook (org-mode . toc-org-enable))

  ;; We want to set up toc-org-mode to ONLY EVER do its thing if the headline has the :TOC: tag.
  ;; (add-hook 'org-mode (lambda ()
                        ;; (unless (eq major-mode 'mu4e-compose-mode)
                        ;;   (toc-org-enable))))
  ;; (add-hook 'org~mu4e-mime-convert-to-html #'toc-org-mode -1)
#+END_SRC

For a cleaner online mode.
#+BEGIN_SRC emacs-lisp
  (use-package org-indent :ensure nil :after org :delight)
#+END_SRC

** LaTeX
Nothing, yet.

** Pandoc
Document processing.
#+BEGIN_SRC emacs-lisp
  (use-package pandoc-mode :ensure)
#+END_SRC

** Blog with Hugo
Hugo using org-mode.
#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :ensure t
    :after ox)
#+END_SRC

** Hydras
Interesting keymaps to keep you sane.
#+BEGIN_SRC emacs-lisp
  (use-package hydra)
  (use-package ivy-hydra)
#+END_SRC
*** Modes that toggle on and off
#+BEGIN_SRC emacs-lisp
  (global-set-key
   (kbd "C-x t")
   (defhydra toggle (:color blue)
     "toggle"
     ("a" abbrev-mode "abbrev")
     ("s" flyspell-mode "flyspell")
     ("d" toggle-debug-on-error "debug")
     ("c" fci-mode "fCi")
     ("f" auto-fill-mode "fill")
     ("t" toggle-truncate-lines "truncate")
     ("w" whitespace-mode "whitespace")
     ("q" nil "cancel")))
#+END_SRC

*** Navigation
#+BEGIN_SRC emacs-lisp
  (global-set-key
   (kbd "C-x j")
   (defhydra gotoline
     ( :pre (linum-mode 1)
            :post (linum-mode -1))
     "goto"
     ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
     ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
     ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
     ("e" (lambda () (interactive)(end-of-buffer)) "end")
     ("c" recenter-top-bottom "recenter")
     ("n" next-line "down")
     ("p" (lambda () (interactive) (forward-line -1))  "up")
     ("g" goto-line "goto-line")))
#+END_SRC

*** org-mode
#+BEGIN_SRC emacs-lisp
  (global-set-key
   (kbd "C-c o")
   (defhydra hydra-global-org (:color blue)
     "Org"
     ("t" org-timer-start "Start Timer")
     ("s" org-timer-stop "Stop Timer")
     ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
     ("p" org-timer "Print Timer") ; output timer value to buffer
     ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
     ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
     ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
     ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
     ("l" (or )rg-capture-goto-last-stored "Last Capture")))
#+END_SRC

*** mu4e
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-mu4e-headers (:color blue :hint nil)
    "
     ^General^   | ^Search^           | _!_: read    | _#_: deferred  | ^Switches^
    -^^----------+-^^-----------------| _?_: unread  | _%_: pattern   |-^^------------------
    _n_: next    | _s_: search        | _r_: refile  | _&_: custom    | _O_: sorting
    _p_: prev    | _S_: edit prev qry | _u_: unmk    | _+_: flag      | _P_: threading
    _]_: n unred | _/_: narrow search | _U_: unmk *  | _-_: unflag    | _Q_: full-search
    _[_: p unred | _b_: search bkmk   | _d_: trash   | _T_: thr       | _V_: skip dups
    _y_: sw view | _B_: edit bkmk     | _D_: delete  | _t_: subthr    | _W_: include-related
    _R_: reply   | _{_: previous qry  | _m_: move    |-^^-------------+-^^------------------
    _C_: compose | _}_: next query    | _a_: action  | _|_: thru shl  | _`_: update, reindex
    _F_: forward | _C-+_: show more   | _A_: mk4actn | _H_: help      | _;_: context-switch
    _o_: org-cap | _C--_: show less   | _*_: *thing  | _q_: quit hdrs | _j_: jump2maildir
    "

    ;; general
    ("n" mu4e-headers-next)
    ("p" mu4e-headers-previous)
    ("[" mu4e-select-next-unread)
    ("]" mu4e-select-previous-unread)
    ("y" mu4e-select-other-view)
    ("R" mu4e-compose-reply)
    ("C" mu4e-compose-new)
    ("F" mu4e-compose-forward)
    ("o" kef/org-capture-mu4e)                  ; differs from built-in

    ;; search
    ("s" mu4e-headers-search)
    ("S" mu4e-headers-search-edit)
    ("/" mu4e-headers-search-narrow)
    ("b" mu4e-headers-search-bookmark)
    ("B" mu4e-headers-search-bookmark-edit)
    ("{" mu4e-headers-query-prev)              ; differs from built-in
    ("}" mu4e-headers-query-next)              ; differs from built-in
    ("C-+" mu4e-headers-split-view-grow)
    ("C--" mu4e-headers-split-view-shrink)

    ;; mark stuff
    ("!" mu4e-headers-mark-for-read)
    ("?" mu4e-headers-mark-for-unread)
    ("r" mu4e-headers-mark-for-refile)
    ("u" mu4e-headers-mark-for-unmark)
    ("U" mu4e-mark-unmark-all)
    ("d" mu4e-headers-mark-for-trash)
    ("D" mu4e-headers-mark-for-delete)
    ("m" mu4e-headers-mark-for-move)
    ("a" mu4e-headers-action)                  ; not really a mark per-se
    ("A" mu4e-headers-mark-for-action)         ; differs from built-in
    ("*" mu4e-headers-mark-for-something)

    ("#" mu4e-mark-resolve-deferred-marks)
    ("%" mu4e-headers-mark-pattern)
    ("&" mu4e-headers-mark-custom)
    ("+" mu4e-headers-mark-for-flag)
    ("-" mu4e-headers-mark-for-unflag)
    ("t" mu4e-headers-mark-subthread)
    ("T" mu4e-headers-mark-thread)

    ;; miscellany
    ("q" mu4e~headers-quit-buffer)
    ("H" mu4e-display-manual)
    ("|" mu4e-view-pipe)                       ; does not seem built-in any longer

    ;; switches
    ("O" mu4e-headers-change-sorting)
    ("P" mu4e-headers-toggle-threading)
    ("Q" mu4e-headers-toggle-full-search)
    ("V" mu4e-headers-toggle-skip-duplicates)
    ("W" mu4e-headers-toggle-include-related)

    ;; more miscellany
    ("`" mu4e-update-mail-and-index)           ; differs from built-in
    (";" mu4e-context-switch)
    ("j" mu4e~headers-jump-to-maildir)

    ("." nil))
#+END_SRC

**** mu4e-hydra Keybindings
#+BEGIN_SRC emacs-lisp
  (bind-keys
   :map mu4e-headers-mode-map

   ("{" . mu4e-headers-query-prev)             ; differs from built-in
   ("}" . mu4e-headers-query-next)             ; differs from built-in
   ("o" . kef/org-capture-mu4e)                 ; differs from built-in

   ("A" . mu4e-headers-mark-for-action)        ; differs from built-in

   ("`" . mu4e-update-mail-and-index)          ; differs from built-in
   ("|" . mu4e-view-pipe)                      ; does not seem built-in any longer
   ("." . hydra-mu4e-headers/body))
#+END_SRC

*** elfeed
- Make this match our keybinding map setup under Elfeed proper.
- Also need to add a binding to trigger it, but only when in elfeed.
#+BEGIN_SRC emacs-lisp
  `(defhydra hydra-elfeed ()
  "filter"
  ("c" (elfeed-search-set-filter "@6-months-ago +cs") "cs")
  ("e" (elfeed-search-set-filter "@6-months-ago +emacs") "emacs")
  ("d" (elfeed-search-set-filter "@6-months-ago +education") "education")
  ("*" (elfeed-search-set-filter "@6-months-ago +star") "Starred")
  ("M" elfeed-toggle-star "Mark")
  ("A" (elfeed-search-set-filter "@6-months-ago") "All")
  ("T" (elfeed-search-set-filter "@1-day-ago") "Today")
  ("Q" bjm/elfeed-save-db-and-bury "Quit Elfeed" :color blue)
  ("q" nil "quit" :color blue))
#+END_SRC
