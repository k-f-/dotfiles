#+TITLE: Emacs Configuration
#+AUTHOR: Kyle Fring
#+EMAIL: me@kfring.com
#+OPTIONS: toc:nil num:nil

* A quote from Hunter S. Thompson
'but once you get locked into a serious drug collection,
the tendency is to push it as far as you can.'

       --- Hunter S. Thompson, Fear and Loathing in Las Vegas
* Set global user

#+BEGIN_SRC emacs-lisp
;; --------------------------------------------------
;; Set global user
(setq user-full-name "Kyle Fring"
	  user-mail-address "me@kfring.com")
(setq calendar-location-name "Philadelphia, PA")
(setq calendar-latitude 39.95)
(setq calendar-longitude -75.16)
#+END_SRC

* Customize File Location

#+BEGIN_SRC emacs-lisp
;; Create custom file elsewhere.
;; keep customize settings in their own file 
(setq custom-file "~/.emacs.d/custom.el")
(when (file-exists-p custom-file) (load custom-file))
#+END_SRC

* User Interface
** Minimal UI
   Drop scroll bar, Toolbar, Tooltips and Menu-Bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)
(menu-bar-mode   -1)
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC

** Startup screen
Don't display the help screen at start-up
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** No Bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

* Fonts

#+BEGIN_SRC emacs-lisp
;; Test char and monospace:
;; 0123456789abcdefghijklmnopqrstuvwxyz [] () :;,. !@#$^&*
;; 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ {} <> "'`  ~-_/|\?
(add-to-list 'default-frame-alist
             '(font . "InputMono-12"))
#+END_SRC

* Backups
** Config Backups
Let us centralize where emac's keeps backups

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
	backup-by-copying t    ; Don't delink hardlinks
	version-control t      ; Use version numbers on backups
	delete-old-versions t  ; Automatically delete excess backups
	kept-new-versions 20   ; how many of the newest versions to keep
	kept-old-versions 5    ; and how many of the old
	)
#+END_SRC
** Backup Function
   Create a backup to a designated dir, mirroring the full path ala ergomacs

#+BEGIN_SRC emacs-lisp
(defun kef-backup-file-name (fpath)
  "Return a new file path of a given file path.
If the new path's directories does not exist, create them."
  (let* (
		(backupRootDir "~/.emacs.d/backup/")
		(filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
		(backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
		)
	(make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
	backupFilePath
  )
)

(setq make-backup-file-name-function 'kef-backup-file-name)
#+END_SRC
* Functions
** Kill current buffer.

#+BEGIN_SRC emacs-lisp
(defun kef-kill-current-buffer ()
  "Kill the current buffer without prompting."
  (interactive)
  (kill-buffer (current-buffer)))

;; Don't comfirm on kill buffer, just close it.
(global-set-key (kbd "C-x k") 'kef-kill-current-buffer)
#+END_SRC

** Visit emacs config

#+BEGIN_SRC emacs-lisp
(defun kef-visit-emacs-config ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))

;; Jump to emacs config file.
(global-set-key (kbd "C-c e") 'kef-visit-emacs-config)
#+END_SRC

* Movement & Formatting
** Smooth Scrolling
Smooth scrolling means when you hit C-n to go to the next line
at the bottom of the page, instead of doing a page-down,
it shifts down by a single line. The margin means that
much space is kept between the cursor and the bottom of the buffer.
#+BEGIN_SRC emacs-lisp
(setq scroll-margin 3
	  scroll-conservatively 101
	  scroll-up-aggressively 0.01
	  scroll-down-aggressively 0.01
	  scroll-preserve-screen-position t
	  auto-window-vscroll nil
	  hscroll-margin 5
	  hscroll-step 5)
#+END_SRC
** Tabs
Tabs should be four spaces.
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
(setq-default tab-stop-list (list 4 8 12))
#+END_SRC
** Always indent with spaces

Never use tabs. Tabs are the devil’s whitespace.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
* Package repos

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("org"   . "http://orgmode.org/elpa/")
						 ("gnu"   . "http://elpa.gnu.org/packages/")
						 ("melpa" . "https://melpa.org/packages/")))
(package-initialize)
#+END_SRC

* Bootstrap =use-package=

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-verbose t)
(setq use-package-always-ensure t)
;; (setq use-package-always-defer t)
(require 'use-package)
#+END_SRC

* Themes and Display
** Themes

#+BEGIN_SRC emacs-lisp
(use-package apropospriate-theme :ensure)
(use-package dracula-theme :ensure)
(use-package poet-theme :ensure)
(use-package spacemacs-theme :ensure)
(use-package poet-theme :ensure)
(load-theme 'spacemacs-dark t)
#+END_SRC 

* Packages
** Projectile
Install and configure projectile.
Super+P pulls up projectiles command map.
search in $HOME/code for projects.
#+BEGIN_SRC emacs-lisp
  (use-package projectile :ensure
  :config
  (define-key projectile-mode-map (kbd "s-P") 'projectile-command-map)
  (projectile-mode +1)
  (setq projectile-project-search-path '("~/code/")))
#+END_SRC
** Ivy, Swiper and Counsel

#+BEGIN_SRC emacs-lisp
(use-package ivy :ensure
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
      '((swiper . ivy--regex-plus)
        (t      . ivy--regex-fuzzy)))   ;; enable fuzzy searching everywhere except for Swiper

  (global-set-key (kbd "s-b") 'ivy-switch-buffer)
  ;; (global-set-key (kbd "M-s-b") 'ivy-resume)
  )

(use-package swiper :ensure
  :config
  ;; (global-set-key "\C-r" 'swiper)
  (global-set-key (kbd "C-s") 'swiper))

(use-package counsel :ensure
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "s-y") 'counsel-yank-pop)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file))

(use-package smex :ensure)
(use-package flx :ensure)
(use-package avy :ensure)
#+END_SRC

Ivy-rich make Ivy a bit more friendly by adding information to ivy buffers, e.g. description of commands in =M-x=, meta info about buffers in =ivy-switch-buffer=, etc.

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich :ensure
  :config
  (ivy-rich-mode 1)
  (setq ivy-rich-path-style 'abbrev)) ;; To abbreviate paths using abbreviate-file-name (e.g. replace “/home/username” with “~”
#+END_SRC

** Counsel integration for Projectile
#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile :ensure
  :config
  (counsel-projectile-mode 1)
  (global-set-key (kbd "s-F") 'counsel-projectile-ag)
  (global-set-key (kbd "s-p") 'counsel-projectile))

(setq projectile-completion-system 'ivy)
#+END_SRC  
** org-mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-startup-indented t))
#+END_SRC

Store all my org files in =~/Dropbox/org=.

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org")
#+END_SRC

And all of those files should be in included agenda.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Dropbox/org"))
#+END_SRC

Refile targets should include files and down to 9 levels into them.

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))

;; colorize src blocks in org-mode
(setq org-src-fontify-natively t)
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets)
(setq org-bullets-bullet-list '("◉" "◎" "⚫" "○" "►" "◇"))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
** Flyspell
flyspell - in all text modes
#+BEGIN_SRC emacs-lisp
(use-package flyspell :ensure)
(add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC 
** theme-changer
We where changing theme based on time, but let us stick with Dracula for now.
#+BEGIN_SRC emacs-lisp
;; (use-package theme-changer :ensure)
;; (require 'theme-changer)
;; (change-theme 'apropospriate-light 'dracula)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit :ensure
  :config
  (global-set-key (kbd "s-g") 'magit-status))
#+END_SRC

And show changes in the gutter (fringe).

#+BEGIN_SRC emacs-lisp :tangle no
(use-package git-gutter
  :config
  (global-git-gutter-mode 't)
  (set-face-background 'git-gutter:modified 'nil) ;; background color
  (set-face-foreground 'git-gutter:added "green4")
  (set-face-foreground 'git-gutter:deleted "red"))
#+END_SRC
** Company Mode
Use =company-mode= everywhere
#+BEGIN_SRC emacs-lisp
(use-package company :ensure)
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** Use =M-/= for completion.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'company-complete-common)
#+END_SRC

** Save my location within a file

Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.

#+BEGIN_SRC emacs-lisp
  (save-place-mode t)
#+END_SRC

** Install and configure =which-key=

=which-key= displays the possible completions for a long keybinding. That's
really helpful for some modes (like =projectile=, for example).

#+BEGIN_SRC emacs-lisp
(use-package which-key :ensure
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1.0))
#+END_SRC

** org-pomodoro 
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro :ensure)
#+END_SRC

** Deft
Deft-Mode custom functions via: http://pragmaticemacs.com/emacs/tweaking-deft-quicker-notes/
Custom function to save window-layout when launching deft-mode
advise deft to save window config

#+BEGIN_SRC emacs-lisp
(use-package deft :ensure
  :bind ("<f8>" . deft)
  :commands (deft)
  :config (setq deft-directory "~/Dropbox/org/" deft-extensions
                '("md" "org" "txt")))
(setq deft-default-extension "org")
(setq deft-use-filename-as-title nil)
(setq deft-use-filter-string-for-filename t)
(setq deft-file-naming-rules '((noslash . "-")
                               (nospace . "-")
                               (case-fn . downcase)))
(setq deft-text-mode 'org-mode)

;; filenames - replace space and slash with - lcase
(setq deft-file-naming-rules
      '((noslash . "-")
        (nospace . "-")
        (case-fn . downcase)))

(defun kef-deft-save-windows (orig-fun &rest args)
  (setq kef-pre-deft-window-config (current-window-configuration))
  (apply orig-fun args)
  )

(advice-add 'deft :around #'kef-deft-save-windows)

;;function to quit a deft edit cleanly back to pre deft window
(defun kef-quit-deft ()
;;  "Save buffer, kill buffer, kill deft buffer, and restore window config to the way it was before deft was invoked"
  (interactive)
  (save-buffer)
  (kill-this-buffer)
  (switch-to-buffer "*Deft*")
  (kill-this-buffer)
  (when (window-configuration-p kef-pre-deft-window-config)
    (set-window-configuration kef-pre-deft-window-config)
    )
  )

(global-set-key (kbd "C-c q") 'kef-quit-deft)
#+END_SRC
