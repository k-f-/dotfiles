#+TITLE:Emacs Configuration
#+AUTHOR: Kyle Fring
#+EMAIL: me@kfring.com
#+OPTIONS: toc:t num:nil

* A quote from Hunter S. Thompson
'but once you get locked into a serious drug collection,
the tendency is to push it as far as you can.'

--- Hunter S. Thompson, Fear and Loathing in Las Vegas
* Set global user

#+BEGIN_SRC emacs-lisp
  ;; --------------------------------------------------
  ;; Set global user
  (setq user-full-name "Kyle Fring"
        user-mail-address "me@kfring.com")
  (setq calendar-location-name "Chattanooga, TN")
  (setq calendar-latitude 39.95)
  (setq calendar-longitude -75.16)
#+END_SRC

* Package repos
- https://stackoverflow.com/questions/14836958/updating-packages-in-emacs
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("melpa" . "http://melpa.org/packages/")
                           ("melpa-stable" . "http://stable.melpa.org/packages/")
                           ("gnu"   . "http://elpa.gnu.org/packages/")))
  (setq package-archive-priorities
        '(("melpa" . 1)
          ("melpa-stable" . 2)
          ("gnu" . 3)))
  (package-refresh-contents)
  (package-initialize)
#+END_SRC

* Bootstrap =use-package=
Install and load =use-package=
- =use-package-always-defer= was causing our packages to not be re-installed.
  Lets read more about that option soon. ~k-f-
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  ;; (setq use-package-always-defer t)
  (require 'use-package)
#+END_SRC

* Customize File Location
Create custom file elsewhere.
Keep customize settings in their own file 

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file) (load custom-file))
#+END_SRC

* User Interface
** Xresources
- I'm fairly sure this is what was causing some ugly behavior when emacs is invoked.
- Q: Why do we think this?
- A: Our "highlight" function globally in emacs appears to be part of
- Q: Still having the same issue.  Keep digging.
  our =.xresources= scheme.
ref: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Resources.html#Resources][Resources - GNU Emacs Manual]]
#+BEGIN_QUOTE
Emacs does not process X resources at all if you set the variable inhibit-x-resources to a non-nil value. If you invoke Emacs with the ‘-Q’ (or ‘--quick’) command-line option, inhibit-x-resources is automatically set to t.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (setq inhibit-x-resources t)
#+END_SRC

** Minimal UI
Drop scroll bar, Toolbar, Tooltips and Menu-Bar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode   -1)
  (tooltip-mode    -1)
  (menu-bar-mode   -1)
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

** Point (ie: Cursor)
Turn off the blinking cursor.
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

** Startup screen
Don't display the help screen at start-up
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
  (setq inhibit-startup-screen t)
#+END_SRC

** No Bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** y-n not Yes-No
From http://pages.sachachua.com/.emacs.d/Sacha.html#sec-1-4-8

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Avoid native dialogues
#+BEGIN_SRC emacs-lisp
  (setq use-dialog-box nil)
#+END_SRC

** Col-wrap
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook
            '(lambda() (set-fill-column 80)))
  ;; lets just do it globally
  (setq-default fill-column 80)
#+END_SRC

** Display org-mode agenda on startup
- https://stackoverflow.com/questions/23528287/how-to-display-custom-agenda-view-on-emacs-startup
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
            (lambda ()
              (org-agenda nil "a")
              (delete-other-windows)))
#+END_SRC

** Highlight matching parenthesis
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)

  (defun kef/locally-disable-show-paren ()
    (interactive)
    (setq-local show-paren-mode nil))

  (add-hook 'ruby-mode-hook
            #'kef/locally-disable-show-paren)

#+END_SRC

** abbreviations
#+BEGIN_SRC emacs-lisp
  (setq quietly-read-abbrev-file t)
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs")
#+END_SRC

* Fonts
#+BEGIN_SRC emacs-lisp
  ;; Test char and monospace:
  ;; 0123456789abcdefghijklmnopqrstuvwxyz [] () :;,. !@#$^&*
  ;; 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ {} <> "'`  ~-_/|\?
  (add-to-list 'default-frame-alist
               '(font . "InputMono-11"))
#+END_SRC

* Backups
** Config Backups
Let us centralize where emac's keeps backups

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )
#+END_SRC

** Backup Function
Create a backup to a designated dir, mirroring the full path ala ergomacs

#+BEGIN_SRC emacs-lisp
  (defun kef-backup-file-name (fpath)
    "Return a new file path of a given file path.
  If the new path's directories does not exist, create them."
    (let* (
           (backupRootDir "~/.emacs.d/backup/")
           (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
           (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
           )
      (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
      backupFilePath
      )
    )

  (setq make-backup-file-name-function 'kef-backup-file-name)
#+END_SRC

* Functions
** Kill current buffer.

#+BEGIN_SRC emacs-lisp
  (defun kef-kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  ;; Don't comfirm on kill buffer, just close it.
  (global-set-key (kbd "C-x k") 'kef-kill-current-buffer)
#+END_SRC

** Visit emacs config
#+BEGIN_SRC emacs-lisp
  (defun kef-visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  ;; Jump to emacs config file.
  (global-set-key (kbd "C-c e") 'kef-visit-emacs-config)
#+END_SRC

* Keybinding
Set some keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

Move between open windows with =M-o= as well as =C-x o=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC

* Movement, Formatting & Editing
- [[https://www.reddit.com/r/emacs/comments/co9qb/3_tips_for_reducing_strain_on_your_hands/][3 tips for reducing strain on your hands : emacs]]
- eagerly awaiting my plank
** Sentences end with two spaces
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space t)
#+END_SRC

** Smooth Scrolling
Smooth scrolling means when you hit C-n to go to the next line
at the bottom of the page, instead of doing a page-down,
it shifts down by a single line. The margin means that
much space is kept between the cursor and the bottom of the buffer.
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 3
        scroll-conservatively 101
        scroll-up-aggressively 0.01
        scroll-down-aggressively 0.01
        scroll-preserve-screen-position t
        auto-window-vscroll nil
        hscroll-margin 5
        hscroll-step 5)
#+END_SRC

** Tabs
Tabs should be four spaces.
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default tab-stop-list (list 8 16 24 32 40 48 56 64 72 80 88 96 104 112 120))
#+END_SRC

** Always indent with spaces
Never use tabs. Tabs are the devil’s whitespace.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Save my location within a file

Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.

#+BEGIN_SRC emacs-lisp
  (save-place-mode t)
#+END_SRC

** Cut/copy/comment current line if no region selected
via: https://caolan.org/dotfiles/emacs.html#org172314d
#+BEGIN_QUOTE
In many programs, like SlickEdit, TextMate and VisualStudio, “cut” and “copy” act on the current line if no text is visually selected. For this, I originally used code from Tim Krones Emacs config, but now I'm using the whole-line-or-region package, which can be customised to use the same line-or-region style for comments too. See comments in whole-line-or-region.el for details.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package whole-line-or-region :ensure)
  (add-to-list 'whole-line-or-region-extensions-alist
               '(comment-dwim whole-line-or-region-comment-dwim nil))
  (whole-line-or-region-mode 1)
#+END_SRC

* Themes
** zenburn
Lets stop fucking around with broken themes and just use =zenburn=.
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme :ensure t)
#+END_SRC

** disable themes before we enable a new theme
- My understanding is such.  =load-theme= just puts whatever you call on top of
what is already existing.  This makes a lot of sense if your theme is modular.
- There may be a difference in how =emacs --daemon= and =emacsclient -nc= load
  themes as well.  
#+BEGIN_SRC emacs-lisp
  (defadvice load-theme (before theme-dont-propagate activate)
    (mapc #'disable-theme custom-enabled-themes))
#+END_SRC

** enable-theme:
#+BEGIN_SRC emacs-lisp
  (load-theme 'zenburn t t)
#+END_SRC

* Packages
** Projectile
Install and configure projectile.
Super+P pulls up projectiles command map.
search in $HOME/code for projects.

#+BEGIN_SRC emacs-lisp
  (use-package projectile :ensure
    :config
    (define-key projectile-mode-map (kbd "s-P") 'projectile-command-map)
    (projectile-mode +1)
    (setq projectile-project-search-path '("~/code/")))
#+END_SRC

** Ivy, Swiper and Counsel

#+BEGIN_SRC emacs-lisp
  (use-package ivy :ensure
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
          '((swiper . ivy--regex-plus)
            (t      . ivy--regex-fuzzy)))   ;; enable fuzzy searching everywhere except for Swiper

    (global-set-key (kbd "s-b") 'ivy-switch-buffer)
    ;; (global-set-key (kbd "M-s-b") 'ivy-resume)
    )

  (use-package swiper :ensure
    :config
    ;; (global-set-key "\C-r" 'swiper)
    (global-set-key (kbd "C-s") 'swiper))

  (use-package counsel :ensure
    :config
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "s-y") 'counsel-yank-pop)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file))

  (use-package smex :ensure)
  (use-package flx :ensure)
  (use-package avy :ensure)
#+END_SRC

Ivy-rich make Ivy a bit more friendly by adding information to ivy buffers, e.g. description of commands in =M-x=, meta info about buffers in =ivy-switch-buffer=, etc.

#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich :ensure
    :config
    (ivy-rich-mode 1)
    (setq ivy-rich-path-style 'abbrev)) ;; To abbreviate paths using abbreviate-file-name (e.g. replace “/home/username” with “~”
#+END_SRC

** Counsel integration for Projectile

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile :ensure
    :config
    (counsel-projectile-mode 1)
    (global-set-key (kbd "s-F") 'counsel-projectile-ag)
    (global-set-key (kbd "s-p") 'counsel-projectile))

  (setq projectile-completion-system 'ivy)
#+END_SRC  

** org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-startup-indented t) ;; Indent org-file display
    (setq org-src-tab-acts-natively t)
    )
#+END_SRC

*** Org file locations
Store all my org files in =~/org=, which is symlinked to ~/Dropbox/org/.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org")
#+END_SRC

*** Org agenda 
I cannot seem to make up my mind here.  I suppose with Swiper and Ivy it doesn't
matter to much. Refile targets seem to be more important to have limits on.

#+BEGIN_SRC emacs-lisp
  ;;(setq org-agenda-files '("~/org/life.org"
  ;;                         "~/org/work.org"
  ;;                         "~/org/edu.org"))
  (setq org-agenda-files '("~/org/"))
#+END_SRC

*** Refile Targets
Refile targets should include all files? and down to 9 levels into them.

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets (quote (("notes.org" :maxlevel . 3) ;; Top level headings in notes
                                   ("kfring.org" :maxlevel . 2) ;; Top level in personal blog
                                   (org-agenda-files :maxlevel . 9))))

  (setq org-outline-path-complete-in-steps nil)         ;; Refile in a single go
  (setq org-refile-use-outline-path t)                  ;; Show full paths for refiling

  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
#+END_SRC

*** Colorize src blocks in org-mode

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

*** org-todo-keywords

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)")))
#+END_SRC

*** org-capture-templates

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(("t" "Todo [life]" entry
                                 ;; A list of things to do that I do NOT get direct compensation for.
                                 (file+headline "~/org/life.org" "Personal")
                                 "* TODO %i%? \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")

                                ;; A todo list for work related items, things I get paid money for.
                                ("w" "Todo [work]" entry (file+headline "~/org/work.org" "Tasks")
                                 "* TODO %i%? \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")

                                ;; A place to keep ideas for some other time.
                                ("m" "Moonshots" entry (file+headline "~/org/notes.org" "Someday")
                                 "* WAITING %i%? \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")
                                ;; Hyperlink Capture
                                ("l" "Hyperlink" entry (file+headline "~/org/notes.org" "Notes")
                                 "* [[%?%^{url}][%^{Description?}]]")

                                ;; general Note Capture
                                ("n" "Note" entry (file+headline "~/org/notes.org" "Notes")
                                 "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)


                                ;; Climbing capture templates
                                ;; use %u for non-interactive time-stamps
                                ;; climb.org capture templates for routes/boulder problems
                                ("r" "Route" table-line
                                 (file+headline "~/org/climb.org" "Routes")
                                 "|%u|%?%^{Route Name?|NA}|%^{Yosemite Grade?|5.}|%^{Attempts?|0}|%^{Style?|Sport|Trad}|%^{Notes?}|")
                              
                                ("b" "Boulder Problem" table-line
                                 (file+headline "~/org/climb.org" "Boulder Problems")
                                 "|%u|%?%^{Problem Name?|NA}|%^{V-Grade?|NA}|%^{Attempts?|0}|%^{Notes?}|")
                                ))
#+END_SRC

*** org-log-into-drawer
#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer t)
#+END_SRC

** org-bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets)
  (setq org-bullets-bullet-list '("◉" "◎" "⚫" "○" "►" "◇"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** org-pomodoro

#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro :ensure)
#+END_SRC

** Flyspell

flyspell - in all text modes

#+BEGIN_SRC emacs-lisp
  (use-package flyspell :ensure)
  (add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC 

** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck :ensure)
#+END_SRC

** Magit
- [[http://www.modernemacs.com/post/pretty-magit/][Pretty Magit - Integrating commit leaders | Modern Emacs]]
Bind to =s-g= and =C-c m=.  Later we'll see which one we use more often.
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure
    :config
    :bind (("C-c m" . magit-status)))
  (global-set-key (kbd "s-g") 'magit-status)
#+END_SRC

And show changes in the gutter (fringe).
*** TODO magit-git-gutter
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package git-gutter
    :config
    (global-git-gutter-mode 't)
    (set-face-background 'git-gutter:modified 'nil) ;; background color
    (set-face-foreground 'git-gutter:added "green4")
    (set-face-foreground 'git-gutter:deleted "red"))
#+END_SRC

** Company Mode

Use =company-mode= everywhere

#+BEGIN_SRC emacs-lisp
  (use-package company :ensure)
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** Use =M-/= for completion.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'company-complete-common)
#+END_SRC

** Install and configure =which-key=

=which-key= displays the possible completions for a long keybinding. That's
really helpful for some modes (like =projectile=, for example).

#+BEGIN_SRC emacs-lisp
  (use-package which-key :ensure
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1.0))
#+END_SRC

** Deft

Deft-Mode custom functions via: http://pragmaticemacs.com/emacs/tweaking-deft-quicker-notes/
Custom function to save window-layout when launching deft-mode
advise deft to save window config

#+BEGIN_SRC emacs-lisp
  (use-package deft :ensure
    :bind ("<f8>" . deft)
    :commands (deft)
    :config (setq deft-directory "~/Dropbox/org/" deft-extensions
                  '("md" "org" "txt")))
  (setq deft-default-extension "org")
  (setq deft-use-filename-as-title nil)
  (setq deft-use-filter-string-for-filename t)
  (setq deft-file-naming-rules '((noslash . "-")
                                 (nospace . "-")
                                 (case-fn . downcase)))
  (setq deft-text-mode 'org-mode)

  ;; filenames - replace space and slash with - lcase
  (setq deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))

  (defun kef-deft-save-windows (orig-fun &rest args)
    (setq kef-pre-deft-window-config (current-window-configuration))
    (apply orig-fun args)
    )

  (advice-add 'deft :around #'kef-deft-save-windows)

  ;;function to quit a deft edit cleanly back to pre deft window
  (defun kef-quit-deft ()
    ;;  "Save buffer, kill buffer, kill deft buffer, and restore window config to the way it was before deft was invoked"
    (interactive)
    (save-buffer)
    (kill-this-buffer)
    (switch-to-buffer "*Deft*")
    (kill-this-buffer)
    (when (window-configuration-p kef-pre-deft-window-config)
      (set-window-configuration kef-pre-deft-window-config)
      )
    )

  (global-set-key (kbd "C-c q") 'kef-quit-deft)
#+END_SRC

** ox-hugo

Auto-install the package from Melpa.

#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :ensure t 
    :after ox)
#+END_SRC

** yasnippet
I keep my snippets in =~/.emacs/yasnippets/personal=, and I always want =yasnippet=
enabled.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet)  
  (setq yas-snippet-dirs '("~/.emacs.d/yasnippets/personal/"))
  (yas-global-mode 1)
#+END_SRC

** mode-line
*** minions
#+BEGIN_SRC emacs-lisp
  (use-package minions :ensure t)
  (minions-mode +1)
#+END_SRC

*** moody
#+BEGIN_SRC emacs-lisp
  (use-package moody :ensure
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+END_SRC

** emacs-speaks-statistics
Let's get emacs talking with R.

#+BEGIN_SRC emacs-lisp
  (use-package ess :ensure)
#+END_SRC

** Alert
Alerts for emacs
#+BEGIN_SRC emacs-lisp
  (use-package alert
    :commands (alert)
    :init
    (setq alert-default-style 'notifier))
#+END_SRC

** htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize :ensure)
  (setq org-html-htmlize-output-type 'inline-css)
#+END_SRC

** shell-pop
Launch a shell with C-t.
#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :bind (("C-t" . shell-pop))
    :config
    (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
    (setq shell-pop-term-shell "/bin/bash")
    ;; need to do this manually or not picked up by `shell-pop'
    (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))
#+END_SRC

** web-mode & rainbow-mode
Use web-mode for muxed html/css/js
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode "\\.html?\\'"
    :config
    (progn
      (setq web-mode-markup-indent-offset 4)
      (setq web-mode-code-indent-offset 4)
      (setq web-mode-enable-current-element-highlight t)
      (setq web-mode-enable-auto-expanding t)
      ))
#+END_SRC
Rainbow-mode sets hexcodes as background color in html/css files. Handy.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode :ensure)
#+END_SRC
Turn on rainbow-mode for web/css.
#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook #'rainbow-mode)
  (add-hook 'css-mode-hook #'rainbow-mode)
#+END_SRC

** fontawesome
add an ivy-search for fontawesome icons. slick.

#+BEGIN_SRC emacs-lisp
  (use-package fontawesome :ensure t)
  (defun insert-fontawesome ()
    (interactive)
    (insert (call-interactively 'fontawesome)))
#+END_SRC 

** TODO elfeed
Elfeed is a very nice RSS/Atom reader for emacs.
Something around 2019-02-01 broke the =elfeed-expose= method.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :bind (:map elfeed-search-mode-map
                ("A" . kef/elfeed-show-all)
                ("U" . kef/elfeed-show-unread)
                ("C" . kef/elfeed-show-comics)
                ("N" . kef/elfeed-show-news)
                ("S" . kef/elfeed-show-starred)
                ("q" . kef/elfeed-save-db-and-bury)))
  (global-set-key (kbd "C-x w") 'kef/elfeed-load-db-and-open)
#+END_SRC

Functions & Hooks via: http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; elfeed feed reader                                                     ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;shortcut functions
  ;; show all
  (defun kef/elfeed-show-all ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-all"))
  ;; show just unread
  (defun kef/elfeed-show-unread ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-unread"))
  ;; show me comics, mostly xkcd
  (defun kef/elfeed-show-comics ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-comics"))
  ;; just news
  (defun kef/elfeed-show-news ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-news"))
  ;; shortcut to jump to starred bookmark
  (defun kef/elfeed-show-starred ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-starred"))
#+END_SRC

ref: [[http://pragmaticemacs.com/emacs/star-and-unstar-articles-in-elfeed/][Star and unstar articles in elfeed | Pragmatic Emacs]]
Adding the concept of *stars* to elfeed, along with hooks etc.

#+BEGIN_SRC emacs-lisp
    ;; code to add and remove a starred tag to elfeed article
    ;; based on http://matt.hackinghistory.ca/2015/11/22/elfeed/
    ;; http://pragmaticemacs.com/emacs/star-and-unstar-articles-in-elfeed/#disqus_thread
    ;; more concise version from user: Galrog. Slick.

;;  (defalias 'elfeed-toggle-star
;;    (elfeed-expose #'elfeed-search-toggle-all 'star))

;;  (eval-after-load 'elfeed-search
;;    '(define-key elfeed-search-mode-map (kbd "m") 'elfeed-toggle-star))
  ;; tried *, but m requires one less hand and is closer to the "n" key which were using constantly in this mode.
#+END_SRC  

A colored face for a =starred= entry.
#+BEGIN_SRC emacs-lisp
  (defface elfeed-search-starred-title-face
    '((t :foreground "#f77"))
    "Marks a starred Elfeed entry.")

  (push '(starred elfeed-search-starred-title-face) elfeed-search-face-alist)
#+END_SRC

Functions to support syncing .elfeed between machines
makes sure elfeed reads index from disk before launching
#+BEGIN_SRC emacs-lisp
  (defun kef/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    ;;(elfeed-update)  ;; this sucks on a slow internet connection, just press G instead.
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun kef/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))
#+END_SRC

*** elfeed-org
Cool, we get to use org-mode to manage our feeds. <3
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :ensure t
    :config
    ;; start
    (elfeed-org)
    ;; location of feed orgfile
    (setq rmh-elfeed-org-files (list "~/org/feeds.org")))
#+END_SRC
** WAITING comment-dwim-2
:LOGBOOK:
- State "WAITING"    from              [2019-01-29 Tue 14:50] \\
  Look into having this work for literate programming. It currently does not work
  in =SRC= blocks nor the buffer opened with =C-'=.  Perhaps we can at least get
  the latter working and push upstream.
:END:
#+BEGIN_SRC emacs-lisp
  (use-package comment-dwim-2 :ensure t)
  (global-set-key (kbd "M-;") 'comment-dwim-2)
#+END_SRC

** TODO org-cliplink
- https://github.com/rexim/org-cliplink
We can now replace our link-capture-template with this one?
#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink :ensure t)
  (global-set-key (kbd "C-x p i") 'org-cliplink)
#+END_SRC

** TODO multiple-cursors
- https://github.com/magnars/multiple-cursors.el
We need to configure some keybindings. Check out the github page for suggestions.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors :ensure t)
#+END_SRC

* Other peoples configs
- https://caolan.org/dotfiles/emacs.html
- https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org
- https://github.com/zzamboni/dot-emacs/blob/master/init.org#literate-programming-using-org-babel 
